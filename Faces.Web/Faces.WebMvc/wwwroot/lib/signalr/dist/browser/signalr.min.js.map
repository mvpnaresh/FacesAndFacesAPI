{"version":3,"sources":["webpack://signalR/webpack/universalModuleDefinition","webpack://signalR/webpack/bootstrap","webpack://signalR/src/ILogger.ts","webpack://signalR/webpack/runtime/define property getters","webpack://signalR/webpack/runtime/hasOwnProperty shorthand","webpack://signalR/webpack/runtime/make namespace object","webpack://signalR/src/Errors.ts","webpack://signalR/src/HttpClient.ts","webpack://signalR/src/Loggers.ts","webpack://signalR/src/Utils.ts","webpack://signalR/src/FetchHttpClient.ts","webpack://signalR/src/XhrHttpClient.ts","webpack://signalR/src/DefaultHttpClient.ts","webpack://signalR/src/TextMessageFormat.ts","webpack://signalR/src/HandshakeProtocol.ts","webpack://signalR/src/IHubProtocol.ts","webpack://signalR/src/HubConnection.ts","webpack://signalR/src/Subject.ts","webpack://signalR/src/DefaultReconnectPolicy.ts","webpack://signalR/src/ITransport.ts","webpack://signalR/src/AbortController.ts","webpack://signalR/src/LongPollingTransport.ts","webpack://signalR/src/ServerSentEventsTransport.ts","webpack://signalR/src/WebSocketTransport.ts","webpack://signalR/src/HttpConnection.ts","webpack://signalR/src/JsonHubProtocol.ts","webpack://signalR/src/HubConnectionBuilder.ts","webpack://signalR/src/browser-index.ts"],"names":["root","factory","self","LogLevel","__webpack_require__","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","HttpError","Error","[object Object]","errorMessage","statusCode","trueProto","super","this","__proto__","TimeoutError","AbortError","HttpResponse","statusText","content","HttpClient","url","options","send","method","t","Trace","Debug","Information","Warning","Critical","None","NullLogger","_logLevel","_message","c","instance","VERSION","Arg","val","name","match","values","Platform","isBrowser","window","isWebWorker","isNode","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","length","ArrayBuffer","constructor","async","sendMessage","logger","transportName","httpClient","accessTokenFactory","logMessageContent","withCredentials","defaultHeaders","headers","token","Authorization","getUserAgentHeader","log","responseType","response","post","SubjectSubscription","subject","observer","_subject","_observer","index","observers","indexOf","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","message","msg","Date","toISOString","error","warn","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","node","FetchHttpClient","_logger","fetch","requireFunc","require","_jar","CookieJar","_fetchType","_abortControllerType","bind","AbortController","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","timeout","msTimeout","setTimeout","body","cache","credentials","Content-Type","X-Requested-With","mode","redirect","signal","e","clearTimeout","ok","status","arrayBuffer","text","payload","cookies","getCookies","join","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","setRequestHeader","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","getCookieString","TextMessageFormat","output","RecordSeparator","input","messages","pop","S","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","handshakeRequest","write","JSON","stringify","responseMessage","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","Array","slice","buffer","textData","substring","parse","type","MessageType","HubConnectionState","Invocation","StreamItem","Completion","StreamInvocation","CancelInvocation","Ping","Close","Subject","item","next","err","complete","push","Disconnected","Connecting","Connected","Disconnecting","Reconnecting","HubConnection","connection","protocol","reconnectPolicy","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","_connectionStarted","_cachedPingMessage","writeMessage","state","connectionId","baseUrl","_startPromise","_startWithStateTransitions","_startInternal","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","start","transferFormat","_sendMessage","writeHandshakeRequest","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","_reconnectDelayHandle","_completeClose","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","_launchStreams","sendPromise","_createInvocation","result","newMethod","toLowerCase","handlers","removeIdx","callback","_processHandshakeResponse","parseMessages","_invokeClientMethod","undefined","allowReconnect","parseHandshakeResponse","features","inherentKeepAlive","_pingServerHandle","_timeoutHandle","serverTimeout","invocationMessage","methods","target","m","arguments","_cancelCallbacksWithError","_reconnect","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","nonblocking","streamId","subscribe","_createCompletionMessage","_createStreamItemMessage","i","argument","_isObservable","arg","id","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HttpTransportType","TransferFormat","WebSockets","ServerSentEvents","LongPolling","Text","Binary","R","_isAborted","LongPollingTransport","_accessTokenFactory","_pollAbort","_logMessageContent","_withCredentials","_headers","_running","pollAborted","isIn","_url","pollOptions","_getAccessToken","_updateHeaderToken","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","delete","logMessage","ServerSentEventsTransport","eventSourceConstructor","_eventSourceConstructor","encodeURIComponent","eventSource","opened","Cookie","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_webSocketConstructor","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","EventSource","_options","_startInternalPromise","_sendQueue","TransportSendQueue","transport","_stopError","_stopConnection","skipNegotiation","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","requestedTransport","requestedTransferFormat","connectUrl","_createConnectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","connect","actualTransport","transferFormats","map","s","lastIndexOf","document","aTag","createElement","href","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","ie","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","offset","set","_resolver","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","HubConnectionBuilder","logging","mapping","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","retryDelaysOrReconnectPolicy","isArray","create","writable","end","module","define","amd","signalR"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"signalR\"] = factory();\n\telse\n\t\troot[\"signalR\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // tslint:disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n                                  content: string | ArrayBuffer, logMessageContent: boolean, withCredentials: boolean, defaultHeaders: MessageHeaders): Promise<void> {\r\n    let headers = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...defaultHeaders},\r\n        responseType,\r\n        withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n /*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n /*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this._fetchType = fetch.bind(self);\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content!,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            throw new HttpError(response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: ((...args: any[]) => void)[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                throw this._stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // tslint:disable-next-line:no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupPingTimer();\r\n        this._pingServerHandle = setTimeout(async () => {\r\n            if (this._connectionState === HubConnectionState.Connected) {\r\n                try {\r\n                    await this._sendMessage(this._cachedPingMessage);\r\n                } catch {\r\n                    // We don't care about the error. It should be seen elsewhere in the client.\r\n                    // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                    this._cleanupPingTimer();\r\n                }\r\n            }\r\n        }, this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error);\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // tslint:disable-next-line:forin\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _withCredentials: boolean;\r\n    private readonly _pollAbort: AbortController;\r\n    private readonly _headers: MessageHeaders;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean, withCredentials: boolean, headers: MessageHeaders) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._logMessageContent = logMessageContent;\r\n        this._withCredentials = withCredentials;\r\n        this._headers = headers;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _getAccessToken(): Promise<string | null> {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, this._accessTokenFactory, data, this._logMessageContent, this._withCredentials, this._headers);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._headers },\r\n                withCredentials: this._withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _withCredentials: boolean;\r\n    private readonly _eventSourceConstructor: EventSourceConstructor;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor, withCredentials: boolean, headers: MessageHeaders) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._logMessageContent = logMessageContent;\r\n        this._withCredentials = withCredentials;\r\n        this._eventSourceConstructor = eventSourceConstructor;\r\n        this._headers = headers;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._eventSourceConstructor(url, { withCredentials: this._withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._eventSourceConstructor(url, { withCredentials: this._withCredentials, headers: { ...headers, ...this._headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    const error = new Error(\"Error occurred while starting EventSource\");\r\n                    if (opened) {\r\n                        this._close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, this._accessTokenFactory, data, this._logMessageContent, this._withCredentials, this._headers);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[`Cookie`] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[`Authorization`] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed: ${transportOrError}`);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(`${endpoint.transport} failed: ${ex}`);\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent || false, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent || false, this._options.EventSource, this._options.withCredentials!, this._options.headers || {});\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent || false, this._options.withCredentials!, this._options.headers || {});\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Error(`'${HttpTransportType[transport]}' is not supported in your environment.`);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Error(`'${HttpTransportType[transport]}' is disabled by the client.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\r\n\r\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\r\n// that exist on Uint8Array with the same name, and JavaScript is magic.\r\n// We make them 'writable' because the Buffer polyfill messes with it as well.\r\nif (!Uint8Array.prototype.indexOf) {\r\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\r\n        value: Array.prototype.indexOf,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.slice) {\r\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n        // wrap the slice in Uint8Array so it looks like a Uint8Array.slice call\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        value: function(start?: number, end?: number) { return new Uint8Array(Array.prototype.slice.call(this, start, end)); },\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.forEach) {\r\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\r\n        value: Array.prototype.forEach,\r\n        writable: true,\r\n    });\r\n}\r\n\r\nexport * from \"./index\";\r\n"]}