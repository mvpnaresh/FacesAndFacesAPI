{"version":3,"sources":["webpack://signalR/webpack/universalModuleDefinition","webpack://signalR/webpack/bootstrap","webpack://signalR/src/ILogger.ts","webpack://signalR/webpack/runtime/define property getters","webpack://signalR/webpack/runtime/hasOwnProperty shorthand","webpack://signalR/webpack/runtime/make namespace object","webpack://signalR/src/Errors.ts","webpack://signalR/src/HttpClient.ts","webpack://signalR/src/Loggers.ts","webpack://signalR/src/Utils.ts","webpack://signalR/src/FetchHttpClient.ts","webpack://signalR/src/XhrHttpClient.ts","webpack://signalR/src/DefaultHttpClient.ts","webpack://signalR/src/TextMessageFormat.ts","webpack://signalR/src/HandshakeProtocol.ts","webpack://signalR/src/IHubProtocol.ts","webpack://signalR/src/HubConnection.ts","webpack://signalR/src/Subject.ts","webpack://signalR/src/DefaultReconnectPolicy.ts","webpack://signalR/src/ITransport.ts","webpack://signalR/src/AbortController.ts","webpack://signalR/src/LongPollingTransport.ts","webpack://signalR/src/ServerSentEventsTransport.ts","webpack://signalR/src/WebSocketTransport.ts","webpack://signalR/src/HttpConnection.ts","webpack://signalR/src/JsonHubProtocol.ts","webpack://signalR/src/HubConnectionBuilder.ts","webpack://signalR/src/browser-index.ts"],"names":["root","factory","self","LogLevel","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","HttpError","Error","errorMessage","statusCode","trueProto","super","this","__proto__","TimeoutError","AbortError","HttpResponse","statusText","content","HttpClient","url","options","send","method","NullLogger","_logLevel","_message","instance","VERSION","Arg","val","name","match","values","Platform","window","isBrowser","isWebWorker","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","length","formatArrayBuffer","ArrayBuffer","constructor","async","sendMessage","logger","transportName","httpClient","accessTokenFactory","logMessageContent","withCredentials","defaultHeaders","headers","token","getUserAgentHeader","log","Trace","responseType","response","post","SubjectSubscription","subject","observer","_subject","_observer","index","observers","indexOf","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","message","msg","Date","toISOString","Critical","error","Warning","warn","Information","info","userAgentHeaderName","isNode","constructUserAgent","getOsName","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","node","FetchHttpClient","_logger","fetch","requireFunc","_jar","CookieJar","_fetchType","_abortControllerType","bind","AbortController","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","timeout","msTimeout","setTimeout","body","cache","credentials","mode","redirect","signal","e","clearTimeout","ok","status","arrayBuffer","text","deserializeContent","payload","cookies","getCookies","c","join","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","undefined","setRequestHeader","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","getCookieString","TextMessageFormat","output","RecordSeparator","input","messages","pop","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","handshakeRequest","write","JSON","stringify","responseMessage","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","Array","slice","buffer","textData","substring","parse","type","MessageType","HubConnectionState","Subject","item","next","err","complete","push","HubConnection","connection","protocol","reconnectPolicy","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","writeMessage","Ping","connectionId","baseUrl","Reconnecting","_startPromise","_startWithStateTransitions","Connecting","Debug","_startInternal","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","start","transferFormat","_sendMessage","writeHandshakeRequest","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","_completeClose","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","Completion","_launchStreams","sendPromise","_createInvocation","result","newMethod","toLowerCase","handlers","removeIdx","callback","_processHandshakeResponse","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","parseHandshakeResponse","features","inherentKeepAlive","_pingServerHandle","_timeoutHandle","serverTimeout","invocationMessage","methods","target","m","arguments","_cancelCallbacksWithError","_reconnect","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","nonblocking","streamId","subscribe","_createCompletionMessage","_createStreamItemMessage","i","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HttpTransportType","TransferFormat","_isAborted","LongPollingTransport","_accessTokenFactory","_pollAbort","_logMessageContent","_withCredentials","_headers","_running","isIn","_url","Binary","pollOptions","_getAccessToken","_updateHeaderToken","pollUrl","_closeError","_receiving","_poll","pollAborted","_raiseOnClose","deleteOptions","delete","logMessage","ServerSentEventsTransport","eventSourceConstructor","_eventSourceConstructor","encodeURIComponent","eventSource","opened","Text","Cookie","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_webSocketConstructor","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","EventSource","_options","_startInternalPromise","_sendQueue","TransportSendQueue","transport","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","requestedTransport","requestedTransferFormat","connectUrl","_createConnectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","ServerSentEvents","LongPolling","connect","actualTransport","transportMatches","transferFormats","map","s","lastIndexOf","document","aTag","createElement","href","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","offset","set","_resolver","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","HubConnectionBuilder","logging","mapping","parseLogLevel","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","retryDelaysOrReconnectPolicy","isArray","create","writable","end","module","define","amd"],"mappings":"AAAA,IAA2CA,EAAMC,EAAND,EASxCE,KAT8CD,EASxC,WACT,M,MCTA,ICOYE,EDPRC,EAAsB,CEA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBT,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,IAAc,CAAEe,OAAO,M,8VCDhD,MAAMC,UAAkBC,MAa3B,YAAYC,EAAsBC,GAC9B,MAAMC,aAAuBV,UAC7BW,MAAMH,GACNI,KAAKH,WAAaA,EAIlBG,KAAKC,UAAYH,GAKlB,MAAMI,UAAqBP,MAS9B,YAAYC,EAAuB,uBAC/B,MAAME,aAAuBV,UAC7BW,MAAMH,GAINI,KAAKC,UAAYH,GAKlB,MAAMK,UAAmBR,MAS5B,YAAYC,EAAuB,sBAC/B,MAAME,aAAuBV,UAC7BW,MAAMH,GAINI,KAAKC,UAAYH,GC9BlB,MAAMM,EAqCT,YACoBP,EACAQ,EACAC,GAFA,KAAAT,aACA,KAAAQ,aACA,KAAAC,WAQjB,MAAeC,EAeX,IAAIC,EAAaC,GACpB,OAAOT,KAAKU,KAAK,IACVD,EACHE,OAAQ,MACRH,QAkBD,KAAKA,EAAaC,GACrB,OAAOT,KAAKU,KAAK,IACVD,EACHE,OAAQ,OACRH,QAkBD,OAAOA,EAAaC,GACvB,OAAOT,KAAKU,KAAK,IACVD,EACHE,OAAQ,SACRH,QAiBD,gBAAgBA,GACnB,MAAO,KL3Jf,SAAYhC,GAER,qBAEA,qBAEA,iCAEA,yBAEA,qBAEA,2BAEA,mBAdJ,CAAYA,MAAQ,KMFb,MAAMoC,EAIT,eAIO,IAAIC,EAAqBC,KANlB,EAAAC,SAAoB,IAAIH,ECKnC,MAAMI,EAAkB,kBAExB,MAAMC,EACF,kBAAkBC,EAAUC,GAC/B,GAAID,QACA,MAAM,IAAIvB,MAAM,QAAQwB,4BAGzB,kBAAkBD,EAAaC,GAClC,IAAKD,GAAOA,EAAIE,MAAM,SAClB,MAAM,IAAIzB,MAAM,QAAQwB,oCAIzB,YAAYD,EAAUG,EAAaF,GAEtC,KAAMD,KAAOG,GACT,MAAM,IAAI1B,MAAM,WAAWwB,YAAeD,OAM/C,MAAMI,EACF,uBACH,MAAyB,iBAAXC,OAGX,yBACH,MAAuB,iBAAThD,MAAqB,kBAAmBA,KAGnD,oBACH,OAAQyB,KAAKwB,YAAcxB,KAAKyB,aAKjC,SAASC,EAAcC,EAAWC,GACrC,IAAIC,EAAS,GAYb,OAXIC,EAAcH,IACdE,EAAS,yBAAyBF,EAAKI,aACnCH,IACAC,GAAU,eAYf,SAA2BF,GAC9B,MAAMK,EAAO,IAAIC,WAAWN,GAG5B,IAAIO,EAAM,GAOV,OANAF,EAAKG,SAASC,IAEVF,GAAO,KADKE,EAAM,GAAK,IAAM,KACXA,EAAIC,SAAS,UAI5BH,EAAII,OAAO,EAAGJ,EAAIK,OAAS,GAvBDC,CAAkBb,QAExB,iBAATA,IACdE,EAAS,yBAAyBF,EAAKY,SACnCX,IACAC,GAAU,eAAeF,OAG1BE,EAoBJ,SAASC,EAAcZ,GAC1B,OAAOA,GAA8B,oBAAhBuB,cAChBvB,aAAeuB,aAEXvB,EAAIwB,aAAwC,gBAAzBxB,EAAIwB,YAAYvB,MAIzCwB,eAAeC,EAAYC,EAAiBC,EAAuBC,EAAwBvC,EAAawC,EAC7E1C,EAA+B2C,EAA4BC,EAA0BC,GACnH,IAAIC,EAAU,GACd,GAAIJ,EAAoB,CACpB,MAAMK,QAAcL,IAChBK,IACAD,EAAU,CACN,cAAmB,UAAUC,MAKzC,MAAOlC,EAAM1B,GAAS6D,IACtBF,EAAQjC,GAAQ1B,EAEhBoD,EAAOU,IAAI/E,EAASgF,MAAO,IAAIV,8BAA0CpB,EAAcpB,EAAS2C,OAEhG,MAAMQ,EAAe3B,EAAcxB,GAAW,cAAgB,OACxDoD,QAAiBX,EAAWY,KAAKnD,EAAK,CACxCF,UACA8C,QAAS,IAAKA,KAAYD,GAC1BM,eACAP,oBAGJL,EAAOU,IAAI/E,EAASgF,MAAO,IAAIV,mDAA+DY,EAAS7D,eAqBpG,MAAM+D,EAIT,YAAYC,EAAqBC,GAC7B9D,KAAK+D,EAAWF,EAChB7D,KAAKgE,EAAYF,EAGd,UACH,MAAMG,EAAgBjE,KAAK+D,EAASG,UAAUC,QAAQnE,KAAKgE,GACvDC,GAAS,GACTjE,KAAK+D,EAASG,UAAUE,OAAOH,EAAO,GAGH,IAAnCjE,KAAK+D,EAASG,UAAU3B,QAAgBvC,KAAK+D,EAASM,gBACtDrE,KAAK+D,EAASM,iBAAiBC,OAAOC,SAM3C,MAAMC,EAWT,YAAYC,GACRzE,KAAK0E,EAAYD,EACjBzE,KAAK2E,IAAMC,QAGR,IAAIC,EAAoBC,GAC3B,GAAID,GAAY7E,KAAK0E,EAAW,CAC5B,MAAMK,EAAM,KAAI,IAAIC,MAAOC,kBAAkBzG,EAASqG,OAAcC,IACpE,OAAQD,GACJ,KAAKrG,EAAS0G,SACd,KAAK1G,EAASmB,MACVK,KAAK2E,IAAIQ,MAAMJ,GACf,MACJ,KAAKvG,EAAS4G,QACVpF,KAAK2E,IAAIU,KAAKN,GACd,MACJ,KAAKvG,EAAS8G,YACVtF,KAAK2E,IAAIY,KAAKR,GACd,MACJ,QAEI/E,KAAK2E,IAAIpB,IAAIwB,MAQ1B,SAASzB,IACZ,IAAIkC,EAAsB,uBAI1B,OAHIlE,EAASmE,SACTD,EAAsB,cAEnB,CAAEA,EAAqBE,EAAmB1E,EAAS2E,IAuDtDrE,EAASmE,OACF,SAEA,UA1D0EG,MAIlF,SAASF,EAAmBG,EAAiBC,EAAYC,EAAiBC,GAE7E,IAAIC,EAAoB,qBAExB,MAAMC,EAAgBL,EAAQM,MAAM,KAmBpC,OAlBAF,GAAa,GAAGC,EAAc,MAAMA,EAAc,KAClDD,GAAa,KAAKJ,MAGdI,GADAH,GAAa,KAAPA,EACO,GAAGA,MAEH,eAGjBG,GAAa,GAAGF,IAGZE,GADAD,EACa,KAAKA,IAEL,4BAGjBC,GAAa,IACNA,EAGI,SAASN,IACpB,IAAIrE,EAASmE,OAYT,MAAO,GAXP,OAAQW,QAAQC,UACZ,IAAK,QACD,MAAO,aACX,IAAK,SACD,MAAO,QACX,IAAK,QACD,MAAO,QACX,QACI,OAAOD,QAAQC,UAOhB,SAAST,IACpB,GAAItE,EAASmE,OACT,OAAOW,QAAQE,SAASC,KCnPzB,MAAMC,UAAwBjG,EAOjC,YAAmBsC,GAIf,GAHA9C,QACAC,KAAKyG,EAAU5D,EAEM,oBAAV6D,MAAuB,CAG9B,MAAMC,EAA0D,QAGhE3G,KAAK4G,EAAO,IAAKD,EAAY,gBAAiBE,WAC9C7G,KAAK8G,EAAaH,EAAY,cAI9B3G,KAAK8G,EAAaH,EAAY,eAAZA,CAA4B3G,KAAK8G,EAAY9G,KAAK4G,GAGpE5G,KAAK+G,EAAuBJ,EAAY,yBAExC3G,KAAK8G,EAAaJ,MAAMM,KAAKzI,MAC7ByB,KAAK+G,EAAuBE,gBAK7B,WAAWC,GAEd,GAAIA,EAAQC,aAAeD,EAAQC,YAAYC,QAC3C,MAAM,IAAIjH,EAGd,IAAK+G,EAAQvG,OACT,MAAM,IAAIhB,MAAM,sBAEpB,IAAKuH,EAAQ1G,IACT,MAAM,IAAIb,MAAM,mBAGpB,MAAM0H,EAAkB,IAAIrH,KAAK+G,EAEjC,IAAI5B,EAEA+B,EAAQC,cACRD,EAAQC,YAAYG,QAAU,KAC1BD,EAAgBE,QAChBpC,EAAQ,IAAIhF,IAMpB,IAUIuD,EAVA8D,EAAiB,KACrB,GAAIN,EAAQO,QAAS,CACjB,MAAMC,EAAYR,EAAQO,QAC1BD,EAAYG,YAAW,KACnBN,EAAgBE,QAChBvH,KAAKyG,EAAQlD,IAAI/E,EAAS4G,QAAS,8BACnCD,EAAQ,IAAIjF,IACbwH,GAIP,IACIhE,QAAiB1D,KAAK8G,EAAWI,EAAQ1G,IAAM,CAC3CoH,KAAMV,EAAQ5G,QACduH,MAAO,WACPC,aAAyC,IAA5BZ,EAAQhE,gBAA2B,UAAY,cAC5DE,QAAS,CACL,eAAgB,2BAChB,mBAAoB,oBACjB8D,EAAQ9D,SAEfzC,OAAQuG,EAAQvG,OAChBoH,KAAM,OACNC,SAAU,SACVC,OAAQZ,EAAgBY,SAE9B,MAAOC,GACL,GAAI/C,EACA,MAAMA,EAMV,MAJAnF,KAAKyG,EAAQlD,IACT/E,EAAS4G,QACT,4BAA4B8C,MAE1BA,E,QAEFV,GACAW,aAAaX,GAEbN,EAAQC,cACRD,EAAQC,YAAYG,QAAU,MAItC,IAAK5D,EAAS0E,GACV,MAAM,IAAI1I,EAAUgE,EAASrD,WAAYqD,EAAS2E,QAGtD,MAAM/H,EAoBd,SAA4BoD,EAAoBD,GAC5C,IAAInD,EACJ,OAAQmD,GACJ,IAAK,cACDnD,EAAUoD,EAAS4E,cACnB,MACJ,IAAK,OACDhI,EAAUoD,EAAS6E,OACnB,MACJ,IAAK,OACL,IAAK,WACL,IAAK,OACD,MAAM,IAAI5I,MAAM,GAAG8D,uBACvB,QACInD,EAAUoD,EAAS6E,OAI3B,OAAOjI,EAtCakI,CAAmB9E,EAAUwD,EAAQzD,cAC/CgF,QAAgBnI,EAEtB,OAAO,IAAIF,EACPsD,EAAS2E,OACT3E,EAASrD,WACToI,GAID,gBAAgBjI,GACnB,IAAIkI,EAAkB,GAKtB,OAJIpH,EAASmE,QAAUzF,KAAK4G,GAExB5G,KAAK4G,EAAK+B,WAAWnI,GAAK,CAAC0H,EAAGU,IAAMF,EAAUE,EAAEC,KAAK,QAElDH,GC/HR,MAAMI,UAAsBvI,EAG/B,YAAmBsC,GACf9C,QACAC,KAAKyG,EAAU5D,EAIZ,KAAKqE,GAER,OAAIA,EAAQC,aAAeD,EAAQC,YAAYC,QACpC2B,QAAQC,OAAO,IAAI7I,GAGzB+G,EAAQvG,OAGRuG,EAAQ1G,IAIN,IAAIuI,SAAsB,CAACE,EAASD,KACvC,MAAME,EAAM,IAAIC,eAEhBD,EAAIE,KAAKlC,EAAQvG,OAASuG,EAAQ1G,KAAM,GACxC0I,EAAIhG,qBAA8CmG,IAA5BnC,EAAQhE,iBAAuCgE,EAAQhE,gBAC7EgG,EAAII,iBAAiB,mBAAoB,kBAEzCJ,EAAII,iBAAiB,eAAgB,4BAErC,MAAMlG,EAAU8D,EAAQ9D,QACpBA,GACAtE,OAAOyK,KAAKnG,GACPjB,SAASqH,IACNN,EAAII,iBAAiBE,EAAQpG,EAAQoG,OAI7CtC,EAAQzD,eACRyF,EAAIzF,aAAeyD,EAAQzD,cAG3ByD,EAAQC,cACRD,EAAQC,YAAYG,QAAU,KAC1B4B,EAAI3B,QACJyB,EAAO,IAAI7I,KAIf+G,EAAQO,UACRyB,EAAIzB,QAAUP,EAAQO,SAG1ByB,EAAIO,OAAS,KACLvC,EAAQC,cACRD,EAAQC,YAAYG,QAAU,MAG9B4B,EAAIb,QAAU,KAAOa,EAAIb,OAAS,IAClCY,EAAQ,IAAI7I,EAAa8I,EAAIb,OAAQa,EAAI7I,WAAY6I,EAAIxF,UAAYwF,EAAIQ,eAEzEV,EAAO,IAAItJ,EAAUwJ,EAAI7I,WAAY6I,EAAIb,UAIjDa,EAAIS,QAAU,KACV3J,KAAKyG,EAAQlD,IAAI/E,EAAS4G,QAAS,4BAA4B8D,EAAIb,WAAWa,EAAI7I,eAClF2I,EAAO,IAAItJ,EAAUwJ,EAAI7I,WAAY6I,EAAIb,UAG7Ca,EAAIU,UAAY,KACZ5J,KAAKyG,EAAQlD,IAAI/E,EAAS4G,QAAS,8BACnC4D,EAAO,IAAI9I,IAGfgJ,EAAIxI,KAAKwG,EAAQ5G,SAAW,OAzDrByI,QAAQC,OAAO,IAAIrJ,MAAM,oBAHzBoJ,QAAQC,OAAO,IAAIrJ,MAAM,wBCZrC,MAAMkK,UAA0BtJ,EAInC,YAAmBsC,GAGf,GAFA9C,QAEqB,oBAAV2G,OAAyBpF,EAASmE,OACzCzF,KAAK8J,EAAc,IAAItD,EAAgB3D,OACpC,IAA8B,oBAAnBsG,eAGd,MAAM,IAAIxJ,MAAM,+BAFhBK,KAAK8J,EAAc,IAAIhB,EAAcjG,IAOtC,KAAKqE,GAER,OAAIA,EAAQC,aAAeD,EAAQC,YAAYC,QACpC2B,QAAQC,OAAO,IAAI7I,GAGzB+G,EAAQvG,OAGRuG,EAAQ1G,IAINR,KAAK8J,EAAYpJ,KAAKwG,GAHlB6B,QAAQC,OAAO,IAAIrJ,MAAM,oBAHzBoJ,QAAQC,OAAO,IAAIrJ,MAAM,uBASjC,gBAAgBa,GACnB,OAAOR,KAAK8J,EAAYC,gBAAgBvJ,ICxCzC,MAAMwJ,EAIF,aAAaC,GAChB,MAAO,GAAGA,IAASD,EAAkBE,kBAGlC,aAAaC,GAChB,GAAIA,EAAMA,EAAM5H,OAAS,KAAOyH,EAAkBE,gBAC9C,MAAM,IAAIvK,MAAM,0BAGpB,MAAMyK,EAAWD,EAAMhE,MAAM6D,EAAkBE,iBAE/C,OADAE,EAASC,MACFD,GAdG,EAAAE,oBAAsB,GACtB,EAAAJ,gBAAkBK,OAAOC,aAAaR,EAAkBM,qBCYnE,MAAMG,EAEF,sBAAsBC,GACzB,OAAOV,EAAkBW,MAAMC,KAAKC,UAAUH,IAG3C,uBAAuB/I,GAC1B,IAAImJ,EACAC,EACAC,EAEJ,GAAIlJ,EAAcH,GAAO,CAErB,MAAMsJ,EAAa,IAAIhJ,WAAWN,GAC5BuJ,EAAiBD,EAAW9G,QAAQ6F,EAAkBM,qBAC5D,IAAwB,IAApBY,EACA,MAAM,IAAIvL,MAAM,0BAKpB,MAAMwL,EAAiBD,EAAiB,EACxCH,EAAcR,OAAOC,aAAaY,MAAM,KAAMC,MAAMjM,UAAUkM,MAAMhM,KAAK2L,EAAWK,MAAM,EAAGH,KAC7FH,EAAiBC,EAAWlJ,WAAaoJ,EAAkBF,EAAWK,MAAMH,GAAgBI,OAAS,SAClG,CACH,MAAMC,EAAmB7J,EACnBuJ,EAAiBM,EAASrH,QAAQ6F,EAAkBE,iBAC1D,IAAwB,IAApBgB,EACA,MAAM,IAAIvL,MAAM,0BAKpB,MAAMwL,EAAiBD,EAAiB,EACxCH,EAAcS,EAASC,UAAU,EAAGN,GACpCH,EAAiBQ,EAASjJ,OAAS4I,EAAkBK,EAASC,UAAUN,GAAkB,KAI9F,MAAMf,EAAWJ,EAAkB0B,MAAMX,GACnCrH,EAAWkH,KAAKc,MAAMtB,EAAS,IACrC,GAAI1G,EAASiI,KACT,MAAM,IAAIhM,MAAM,kDAMpB,OAJAmL,EAAkBpH,EAIX,CAACsH,EAAeF,IC5D/B,IAAYc,ECSAC,GDTZ,SAAYD,GAER,+BAEA,+BAEA,+BAEA,2CAEA,2CAEA,mBAEA,qBAdJ,CAAYA,MAAW,KEAhB,MAAME,EAOT,cACI9L,KAAKkE,UAAY,GAGd,KAAK6H,GACR,IAAK,MAAMjI,KAAY9D,KAAKkE,UACxBJ,EAASkI,KAAKD,GAIf,MAAME,GACT,IAAK,MAAMnI,KAAY9D,KAAKkE,UACpBJ,EAASqB,OACTrB,EAASqB,MAAM8G,GAKpB,WACH,IAAK,MAAMnI,KAAY9D,KAAKkE,UACpBJ,EAASoI,UACTpI,EAASoI,WAKd,UAAUpI,GAEb,OADA9D,KAAKkE,UAAUiI,KAAKrI,GACb,IAAIF,EAAoB5D,KAAM8D,KD1B7C,SAAY+H,GAER,8BAEA,0BAEA,wBAEA,gCAEA,8BAVJ,CAAYA,MAAkB,KAcvB,MAAMO,EA0DT,YAAoBC,EAAyBxJ,EAAiByJ,EAAwBC,GAClFtL,EAAIuL,WAAWH,EAAY,cAC3BpL,EAAIuL,WAAW3J,EAAQ,UACvB5B,EAAIuL,WAAWF,EAAU,YAEzBtM,KAAKyM,4BAjFyB,IAkF9BzM,KAAK0M,gCAjF+B,KAmFpC1M,KAAKyG,EAAU5D,EACf7C,KAAK2M,EAAYL,EACjBtM,KAAKqM,WAAaA,EAClBrM,KAAK4M,EAAmBL,EACxBvM,KAAK6M,EAAqB,IAAIpC,EAE9BzK,KAAKqM,WAAWS,UAAanL,GAAc3B,KAAK+M,EAAqBpL,GACrE3B,KAAKqM,WAAWW,QAAW7H,GAAkBnF,KAAKiN,EAAkB9H,GAEpEnF,KAAKkN,EAAa,GAClBlN,KAAKmN,EAAW,GAChBnN,KAAKoN,EAAmB,GACxBpN,KAAKqN,EAAyB,GAC9BrN,KAAKsN,EAAwB,GAC7BtN,KAAKuN,EAAgB,EACrBvN,KAAKwN,GAA6B,EAClCxN,KAAKyN,EAAmB5B,EAAmB6B,aAC3C1N,KAAK2N,GAAqB,EAE1B3N,KAAK4N,EAAqB5N,KAAK2M,EAAUkB,aAAa,CAAElC,KAAMC,EAAYkC,OA/BvE,cAAczB,EAAyBxJ,EAAiByJ,EAAwBC,GACnF,OAAO,IAAIH,EAAcC,EAAYxJ,EAAQyJ,EAAUC,GAkC3D,YACI,OAAOvM,KAAKyN,EAMhB,mBACI,OAAOzN,KAAKqM,YAAcrM,KAAKqM,WAAW0B,cAAwB,KAItE,cACI,OAAO/N,KAAKqM,WAAW2B,SAAW,GAQtC,YAAYxN,GACR,GAAIR,KAAKyN,IAAqB5B,EAAmB6B,cAAgB1N,KAAKyN,IAAqB5B,EAAmBoC,aAC1G,MAAM,IAAItO,MAAM,0FAGpB,IAAKa,EACD,MAAM,IAAIb,MAAM,8CAGpBK,KAAKqM,WAAW2B,QAAUxN,EAOvB,QAEH,OADAR,KAAKkO,EAAgBlO,KAAKmO,IACnBnO,KAAKkO,EAGR,UACJ,GAAIlO,KAAKyN,IAAqB5B,EAAmB6B,aAC7C,OAAO3E,QAAQC,OAAO,IAAIrJ,MAAM,0EAGpCK,KAAKyN,EAAmB5B,EAAmBuC,WAC3CpO,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,2BAEjC,UACUrO,KAAKsO,IAEXtO,KAAKyN,EAAmB5B,EAAmB0C,UAC3CvO,KAAK2N,GAAqB,EAC1B3N,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,yCACnC,MAAOnG,GAGL,OAFAlI,KAAKyN,EAAmB5B,EAAmB6B,aAC3C1N,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,gEAAgEnG,OAC1Fa,QAAQC,OAAOd,IAItB,UACJlI,KAAKwO,OAAwBnF,EAC7BrJ,KAAKwN,GAA6B,EAElC,MAAMiB,EAAmB,IAAI1F,SAAQ,CAACE,EAASD,KAC3ChJ,KAAK0O,EAAqBzF,EAC1BjJ,KAAK2O,EAAqB3F,WAGxBhJ,KAAKqM,WAAWuC,MAAM5O,KAAK2M,EAAUkC,gBAE3C,IACI,MAAMnE,EAA4C,CAC9C4B,SAAUtM,KAAK2M,EAAUxL,KACzB0E,QAAS7F,KAAK2M,EAAU9G,SAmB5B,GAhBA7F,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,oCAE3BrO,KAAK8O,EAAa9O,KAAK6M,EAAmBkC,sBAAsBrE,IAEtE1K,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,sBAAsBtF,KAAK2M,EAAUxL,UAG5EnB,KAAKgP,IACLhP,KAAKiP,IACLjP,KAAKkP,UAECT,EAKFzO,KAAKwO,EAIL,MAAMxO,KAAKwO,EAEjB,MAAOtG,GASL,MARAlI,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,oCAAoCnG,8CAErElI,KAAKgP,IACLhP,KAAKmP,UAICnP,KAAKqM,WAAW+C,KAAKlH,GACrBA,GAQP,aAEH,MAAMmH,EAAerP,KAAKkO,EAE1BlO,KAAKsP,EAAetP,KAAKuP,UACnBvP,KAAKsP,EAEX,UAEUD,EACR,MAAOnH,KAKL,EAAc/C,GAClB,OAAInF,KAAKyN,IAAqB5B,EAAmB6B,cAC7C1N,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,8BAA8BlJ,+DACxD4D,QAAQE,WAGfjJ,KAAKyN,IAAqB5B,EAAmB2D,eAC7CxP,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,+BAA+BlJ,4EACzDnF,KAAKsP,IAGhBtP,KAAKyN,EAAmB5B,EAAmB2D,cAE3CxP,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,2BAE7BrO,KAAKyP,GAILzP,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,iEAEjClG,aAAanI,KAAKyP,GAClBzP,KAAKyP,OAAwBpG,EAE7BrJ,KAAK0P,KACE3G,QAAQE,YAGnBjJ,KAAKgP,IACLhP,KAAKmP,IACLnP,KAAKwO,EAAwBrJ,GAAS,IAAIxF,MAAM,uEAKzCK,KAAKqM,WAAW+C,KAAKjK,KAUzB,OAAgBwK,KAAuBC,GAC1C,MAAOC,EAASC,GAAa9P,KAAK+P,GAAwBH,GACpDI,EAAuBhQ,KAAKiQ,GAAwBN,EAAYC,EAAME,GAE5E,IAAII,EACJ,MAAMrM,EAAU,IAAIiI,EAqCpB,OApCAjI,EAAQQ,eAAiB,KACrB,MAAM8L,EAA4CnQ,KAAKoQ,GAAwBJ,EAAqBK,cAIpG,cAFOrQ,KAAKkN,EAAW8C,EAAqBK,cAErCH,EAAaI,MAAK,IACdtQ,KAAKuQ,GAAkBJ,MAItCnQ,KAAKkN,EAAW8C,EAAqBK,cAAgB,CAACG,EAA+DrL,KAC7GA,EACAtB,EAAQsB,MAAMA,GAEPqL,IAEHA,EAAgB7E,OAASC,EAAY6E,WACjCD,EAAgBrL,MAChBtB,EAAQsB,MAAM,IAAIxF,MAAM6Q,EAAgBrL,QAExCtB,EAAQqI,WAGZrI,EAAQmI,KAAMwE,EAAoB,QAK9CN,EAAelQ,KAAKuQ,GAAkBP,GACjC1L,OAAO4D,IACJrE,EAAQsB,MAAM+C,UACPlI,KAAKkN,EAAW8C,EAAqBK,iBAGpDrQ,KAAK0Q,GAAeb,EAASK,GAEtBrM,EAGH,EAAaiB,GAEjB,OADA9E,KAAKkP,IACElP,KAAKqM,WAAW3L,KAAKoE,GAOxB,GAAkBA,GACtB,OAAO9E,KAAK8O,EAAa9O,KAAK2M,EAAUkB,aAAa/I,IAYlD,KAAK6K,KAAuBC,GAC/B,MAAOC,EAASC,GAAa9P,KAAK+P,GAAwBH,GACpDe,EAAc3Q,KAAKuQ,GAAkBvQ,KAAK4Q,GAAkBjB,EAAYC,GAAM,EAAME,IAI1F,OAFA9P,KAAK0Q,GAAeb,EAASc,GAEtBA,EAcJ,OAAgBhB,KAAuBC,GAC1C,MAAOC,EAASC,GAAa9P,KAAK+P,GAAwBH,GACpDI,EAAuBhQ,KAAK4Q,GAAkBjB,EAAYC,GAAM,EAAOE,GAgC7E,OA9BU,IAAI/G,SAAa,CAACE,EAASD,KAEjChJ,KAAKkN,EAAW8C,EAAqBK,cAAiB,CAACG,EAA+DrL,KAC9GA,EACA6D,EAAO7D,GAEAqL,IAEHA,EAAgB7E,OAASC,EAAY6E,WACjCD,EAAgBrL,MAChB6D,EAAO,IAAIrJ,MAAM6Q,EAAgBrL,QAEjC8D,EAAQuH,EAAgBK,QAG5B7H,EAAO,IAAIrJ,MAAM,4BAA4B6Q,EAAgB7E,WAKzE,MAAMuE,EAAelQ,KAAKuQ,GAAkBP,GACvC1L,OAAO4D,IACJc,EAAOd,UAEAlI,KAAKkN,EAAW8C,EAAqBK,iBAGpDrQ,KAAK0Q,GAAeb,EAASK,MAW9B,GAAGP,EAAoBmB,GACrBnB,GAAemB,IAIpBnB,EAAaA,EAAWoB,cACnB/Q,KAAKmN,EAASwC,KACf3P,KAAKmN,EAASwC,GAAc,KAIsB,IAAlD3P,KAAKmN,EAASwC,GAAYxL,QAAQ2M,IAItC9Q,KAAKmN,EAASwC,GAAYxD,KAAK2E,IAkB5B,IAAInB,EAAoBhP,GAC3B,IAAKgP,EACD,OAGJA,EAAaA,EAAWoB,cACxB,MAAMC,EAAWhR,KAAKmN,EAASwC,GAC/B,GAAKqB,EAGL,GAAIrQ,EAAQ,CACR,MAAMsQ,EAAYD,EAAS7M,QAAQxD,IAChB,IAAfsQ,IACAD,EAAS5M,OAAO6M,EAAW,GACH,IAApBD,EAASzO,eACFvC,KAAKmN,EAASwC,gBAItB3P,KAAKmN,EAASwC,GAStB,QAAQuB,GACPA,GACAlR,KAAKoN,EAAiBjB,KAAK+E,GAQ5B,eAAeA,GACdA,GACAlR,KAAKqN,EAAuBlB,KAAK+E,GAQlC,cAAcA,GACbA,GACAlR,KAAKsN,EAAsBnB,KAAK+E,GAIhC,EAAqBvP,GASzB,GARA3B,KAAKgP,IAEAhP,KAAKwN,IACN7L,EAAO3B,KAAKmR,GAA0BxP,GACtC3B,KAAKwN,GAA6B,GAIlC7L,EAAM,CAEN,MAAMyI,EAAWpK,KAAK2M,EAAUyE,cAAczP,EAAM3B,KAAKyG,GAEzD,IAAK,MAAM3B,KAAWsF,EAClB,OAAQtF,EAAQ6G,MACZ,KAAKC,EAAYyF,WACbrR,KAAKsR,GAAoBxM,GACzB,MACJ,KAAK8G,EAAY2F,WACjB,KAAK3F,EAAY6E,WACb,MAAMS,EAAWlR,KAAKkN,EAAWpI,EAAQuL,cACrCa,IACIpM,EAAQ6G,OAASC,EAAY6E,mBACtBzQ,KAAKkN,EAAWpI,EAAQuL,cAEnCa,EAASpM,IAEb,MACJ,KAAK8G,EAAYkC,KAEb,MACJ,KAAKlC,EAAY4F,MACbxR,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,uCAEvC,MAAMH,EAAQL,EAAQK,MAAQ,IAAIxF,MAAM,sCAAwCmF,EAAQK,YAASkE,GAElE,IAA3BvE,EAAQ2M,eAKRzR,KAAKqM,WAAW+C,KAAKjK,GAGrBnF,KAAKsP,EAAetP,KAAKuP,EAAcpK,GAG3C,MACJ,QACInF,KAAKyG,EAAQlD,IAAI/E,EAAS4G,QAAS,yBAAyBN,EAAQ6G,UAMpF3L,KAAKiP,IAGD,GAA0BtN,GAC9B,IAAImJ,EACAE,EAEJ,KACKA,EAAeF,GAAmB9K,KAAK6M,EAAmB6E,uBAAuB/P,GACpF,MAAOuG,GACL,MAAMpD,EAAU,qCAAuCoD,EACvDlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAOmF,GAEjC,MAAMK,EAAQ,IAAIxF,MAAMmF,GAExB,MADA9E,KAAK2O,EAAmBxJ,GAClBA,EAEV,GAAI2F,EAAgB3F,MAAO,CACvB,MAAML,EAAU,oCAAsCgG,EAAgB3F,MACtEnF,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAOmF,GAEjC,MAAMK,EAAQ,IAAIxF,MAAMmF,GAExB,MADA9E,KAAK2O,EAAmBxJ,GAClBA,EAMV,OAJInF,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,8BAGrCrO,KAAK0O,IACE1D,EAGH,IACAhL,KAAKqM,WAAWsF,SAASC,oBAI7B5R,KAAKmP,IACLnP,KAAK6R,GAAoBlK,YAAWhF,UAChC,GAAI3C,KAAKyN,IAAqB5B,EAAmB0C,UAC7C,UACUvO,KAAK8O,EAAa9O,KAAK4N,GAC/B,MAGE5N,KAAKmP,OAGdnP,KAAK0M,kCAGJ,IACC1M,KAAKqM,WAAWsF,UAAa3R,KAAKqM,WAAWsF,SAASC,oBAEvD5R,KAAK8R,GAAiBnK,YAAW,IAAM3H,KAAK+R,iBAAiB/R,KAAKyM,8BAKlE,gBAIJzM,KAAKqM,WAAW+C,KAAK,IAAIzP,MAAM,wEAG3B,GAAoBqS,GACxB,MAAMC,EAAUjS,KAAKmN,EAAS6E,EAAkBE,OAAOnB,eACvD,GAAIkB,EAAS,CACT,IACIA,EAAQ9P,SAASgQ,GAAMA,EAAE/G,MAAMpL,KAAMgS,EAAkBI,aACzD,MAAOlK,GACLlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,6BAA6BqS,EAAkBE,OAAOnB,8BAA8B7I,OAGzH,GAAI8J,EAAkB3B,aAAc,CAEhC,MAAMvL,EAAU,qFAChB9E,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAOmF,GAGjC9E,KAAKsP,EAAetP,KAAKuP,EAAc,IAAI5P,MAAMmF,UAGrD9E,KAAKyG,EAAQlD,IAAI/E,EAAS4G,QAAS,mCAAmC4M,EAAkBE,kBAIxF,EAAkB/M,GACtBnF,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,kCAAkClJ,4BAAgCnF,KAAKyN,MAGxGzN,KAAKwO,EAAwBxO,KAAKwO,GAAyBrJ,GAAS,IAAIxF,MAAM,iFAI1EK,KAAK0O,GACL1O,KAAK0O,IAGT1O,KAAKqS,GAA0BlN,GAAS,IAAIxF,MAAM,uEAElDK,KAAKgP,IACLhP,KAAKmP,IAEDnP,KAAKyN,IAAqB5B,EAAmB2D,cAC7CxP,KAAK0P,GAAevK,GACbnF,KAAKyN,IAAqB5B,EAAmB0C,WAAavO,KAAK4M,EAEtE5M,KAAKsS,GAAWnN,GACTnF,KAAKyN,IAAqB5B,EAAmB0C,WACpDvO,KAAK0P,GAAevK,GAUpB,GAAeA,GACnB,GAAInF,KAAK2N,EAAoB,CACzB3N,KAAKyN,EAAmB5B,EAAmB6B,aAC3C1N,KAAK2N,GAAqB,EAE1B,IACI3N,KAAKoN,EAAiBjL,SAASyG,GAAMA,EAAEwC,MAAMpL,KAAM,CAACmF,MACtD,MAAO+C,GACLlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,0CAA0CwF,mBAAuB+C,SAKtG,SAAiB/C,GACrB,MAAMoN,EAAqBvN,KAAKwN,MAChC,IAAIC,EAA4B,EAC5BC,OAAuBrJ,IAAVlE,EAAsBA,EAAQ,IAAIxF,MAAM,mDAErDgT,EAAiB3S,KAAK4S,GAAmBH,IAA6B,EAAGC,GAE7E,GAAuB,OAAnBC,EAGA,OAFA3S,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,2GACjCrO,KAAK0P,GAAevK,GAYxB,GARAnF,KAAKyN,EAAmB5B,EAAmBoC,aAEvC9I,EACAnF,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,6CAA6CH,OAEpFnF,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,4BAGA,IAAvCtF,KAAKqN,EAAuB9K,OAAc,CAC1C,IACIvC,KAAKqN,EAAuBlL,SAASyG,GAAMA,EAAEwC,MAAMpL,KAAM,CAACmF,MAC5D,MAAO+C,GACLlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,iDAAiDwF,mBAAuB+C,OAI7G,GAAIlI,KAAKyN,IAAqB5B,EAAmBoC,aAE7C,YADAjO,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,yFAKzC,KAA0B,OAAnBsE,GAAyB,CAQ5B,GAPA3S,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,4BAA4BmN,mBAA2CE,eAExG,IAAI5J,SAASE,IACfjJ,KAAKyP,EAAwB9H,WAAWsB,EAAS0J,MAErD3S,KAAKyP,OAAwBpG,EAEzBrJ,KAAKyN,IAAqB5B,EAAmBoC,aAE7C,YADAjO,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,qFAIrC,IAMI,SALMrO,KAAKsO,IAEXtO,KAAKyN,EAAmB5B,EAAmB0C,UAC3CvO,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,2CAEG,IAAtCtF,KAAKsN,EAAsB/K,OAC3B,IACIvC,KAAKsN,EAAsBnL,SAASyG,GAAMA,EAAEwC,MAAMpL,KAAM,CAACA,KAAKqM,WAAW0B,iBAC3E,MAAO7F,GACLlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,uDAAuDK,KAAKqM,WAAW0B,8BAA8B7F,OAI9I,OACF,MAAOA,GAGL,GAFAlI,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,8CAA8C4C,OAEjFlI,KAAKyN,IAAqB5B,EAAmBoC,aAM7C,OALAjO,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,4BAA4BrO,KAAKyN,oFAE9DzN,KAAKyN,IAA4B5B,EAAmB2D,eACpDxP,KAAK0P,MAKbgD,EAAaxK,aAAavI,MAAQuI,EAAI,IAAIvI,MAAMuI,EAAE7F,YAClDsQ,EAAiB3S,KAAK4S,GAAmBH,IAA6BzN,KAAKwN,MAAQD,EAAoBG,IAI/G1S,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,+CAA+CN,KAAKwN,MAAQD,YAA6BE,gDAEhIzS,KAAK0P,KAGD,GAAmBmD,EAA4BC,EAA6BC,GAChF,IACI,OAAO/S,KAAK4M,EAAkBoG,6BAA6B,CACvDF,sBACAD,qBACAE,gBAEN,MAAO7K,GAEL,OADAlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,6CAA6CkT,MAAuBC,mBAAqC5K,OACnI,MAIP,GAA0B/C,GAC9B,MAAM8N,EAAYjT,KAAKkN,EACvBlN,KAAKkN,EAAa,GAElBpO,OAAOyK,KAAK0J,GACP9Q,SAASvD,KAENsS,EADiB+B,EAAUrU,IAClB,KAAMuG,MAInB,IACAnF,KAAK6R,IACL1J,aAAanI,KAAK6R,IAIlB,IACA7R,KAAK8R,IACL3J,aAAanI,KAAK8R,IAIlB,GAAkBnC,EAAoBC,EAAasD,EAAsBpD,GAC7E,GAAIoD,EACA,OAAyB,IAArBpD,EAAUvN,OACH,CACH6P,UAAWxC,EACXE,YACAoC,OAAQvC,EACRhE,KAAMC,EAAYyF,YAGf,CACHe,UAAWxC,EACXsC,OAAQvC,EACRhE,KAAMC,EAAYyF,YAGvB,CACH,MAAMhB,EAAerQ,KAAKuN,EAG1B,OAFAvN,KAAKuN,IAEoB,IAArBuC,EAAUvN,OACH,CACH6P,UAAWxC,EACXS,aAAcA,EAAahO,WAC3ByN,YACAoC,OAAQvC,EACRhE,KAAMC,EAAYyF,YAGf,CACHe,UAAWxC,EACXS,aAAcA,EAAahO,WAC3B6P,OAAQvC,EACRhE,KAAMC,EAAYyF,aAM1B,GAAexB,EAA+BK,GAClD,GAAuB,IAAnBL,EAAQtN,OAAZ,CAKK2N,IACDA,EAAenH,QAAQE,WAK3B,IAAK,MAAMkK,KAAYtD,EACnBA,EAAQsD,GAAUC,UAAU,CACxBlH,SAAU,KACNgE,EAAeA,EAAaI,MAAK,IAAMtQ,KAAKuQ,GAAkBvQ,KAAKqT,GAAyBF,OAEhGhO,MAAQ8G,IACJ,IAAInH,EAEAA,EADAmH,aAAetM,MACLsM,EAAInH,QACPmH,GAAOA,EAAI5J,SACR4J,EAAI5J,WAEJ,gBAGd6N,EAAeA,EAAaI,MAAK,IAAMtQ,KAAKuQ,GAAkBvQ,KAAKqT,GAAyBF,EAAUrO,OAE1GkH,KAAOD,IACHmE,EAAeA,EAAaI,MAAK,IAAMtQ,KAAKuQ,GAAkBvQ,KAAKsT,GAAyBH,EAAUpH,UAM9G,GAAwB6D,GAC5B,MAAMC,EAAgC,GAChCC,EAAsB,GAC5B,IAAK,IAAIyD,EAAI,EAAGA,EAAI3D,EAAKrN,OAAQgR,IAAK,CAClC,MAAMC,EAAW5D,EAAK2D,GACtB,GAAIvT,KAAKyT,GAAcD,GAAW,CAC9B,MAAML,EAAWnT,KAAKuN,EACtBvN,KAAKuN,IAELsC,EAAQsD,GAAYK,EACpB1D,EAAU3D,KAAKgH,EAAS9Q,YAGxBuN,EAAKxL,OAAOmP,EAAG,IAIvB,MAAO,CAAC1D,EAASC,GAGb,GAAc4D,GAElB,OAAOA,GAAOA,EAAIN,WAAsC,mBAAlBM,EAAIN,UAGtC,GAAwBzD,EAAoBC,EAAaE,GAC7D,MAAMO,EAAerQ,KAAKuN,EAG1B,OAFAvN,KAAKuN,IAEoB,IAArBuC,EAAUvN,OACH,CACH6P,UAAWxC,EACXS,aAAcA,EAAahO,WAC3ByN,YACAoC,OAAQvC,EACRhE,KAAMC,EAAY+H,kBAGf,CACHvB,UAAWxC,EACXS,aAAcA,EAAahO,WAC3B6P,OAAQvC,EACRhE,KAAMC,EAAY+H,kBAKtB,GAAwBC,GAC5B,MAAO,CACHvD,aAAcuD,EACdjI,KAAMC,EAAYiI,kBAIlB,GAAyBD,EAAY7H,GACzC,MAAO,CACHsE,aAAcuD,EACd7H,OACAJ,KAAMC,EAAY2F,YAIlB,GAAyBqC,EAAYzO,EAAa0L,GACtD,OAAI1L,EACO,CACHA,QACAkL,aAAcuD,EACdjI,KAAMC,EAAY6E,YAInB,CACHJ,aAAcuD,EACd/C,SACAlF,KAAMC,EAAY6E,aEv8B9B,MAAMqD,EAAuC,CAAC,EAAG,IAAM,IAAO,IAAO,MAG9D,MAAMC,EAGT,YAAYC,GACRhU,KAAKiU,QAA+B5K,IAAhB2K,EAA4B,IAAIA,EAAa,MAAQF,EAGtE,6BAA6BI,GAChC,OAAOlU,KAAKiU,GAAaC,EAAarB,qBCZ9C,IAAYsB,EAYAC,GAZZ,SAAYD,GAER,mBAEA,+BAEA,2CAEA,iCARJ,CAAYA,MAAiB,KAY7B,SAAYC,GAER,mBAEA,uBAJJ,CAAYA,MAAc,KCRnB,MAAM,EAAb,cACY,KAAAC,IAAsB,EACvB,KAAA/M,QAA+B,KAE/B,QACEtH,KAAKqU,KACNrU,KAAKqU,IAAa,EACdrU,KAAKsH,SACLtH,KAAKsH,WAKjB,aACI,OAAOtH,KAGX,cACI,OAAOA,KAAKqU,ICdb,MAAMC,EAsBT,YAAYvR,EAAwBC,EAAkEH,EAAiBI,EAA4BC,EAA0BE,GACzKpD,KAAK8J,EAAc/G,EACnB/C,KAAKuU,GAAsBvR,EAC3BhD,KAAKyG,EAAU5D,EACf7C,KAAKwU,GAAa,IAAI,EACtBxU,KAAKyU,GAAqBxR,EAC1BjD,KAAK0U,GAAmBxR,EACxBlD,KAAK2U,GAAWvR,EAEhBpD,KAAK4U,IAAW,EAEhB5U,KAAK8M,UAAY,KACjB9M,KAAKgN,QAAU,KAhBnB,kBACI,OAAOhN,KAAKwU,GAAWpN,QAkBpB,cAAc5G,EAAaqO,GAU9B,GATA5N,EAAIuL,WAAWhM,EAAK,OACpBS,EAAIuL,WAAWqC,EAAgB,kBAC/B5N,EAAI4T,KAAKhG,EAAgBuF,EAAgB,kBAEzCpU,KAAK8U,GAAOtU,EAEZR,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,uCAG7BqL,IAAmBuF,EAAeW,QACP,oBAAnB5L,gBAA+E,iBAAtC,IAAIA,gBAAiB1F,aACtE,MAAM,IAAI9D,MAAM,8FAGpB,MAAOwB,EAAM1B,GAAS6D,IAChBF,EAAU,CAAE,CAACjC,GAAO1B,KAAUO,KAAK2U,IAEnCK,EAA2B,CAC7B7N,YAAanH,KAAKwU,GAAWvM,OAC7B7E,UACAqE,QAAS,IACTvE,gBAAiBlD,KAAK0U,IAGtB7F,IAAmBuF,EAAeW,SAClCC,EAAYvR,aAAe,eAG/B,MAAMJ,QAAcrD,KAAKiV,KACzBjV,KAAKkV,GAAmBF,EAAa3R,GAIrC,MAAM8R,EAAU,GAAG3U,OAASwE,KAAKwN,QACjCxS,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,oCAAoC2R,MACrE,MAAMzR,QAAiB1D,KAAK8J,EAAY7K,IAAIkW,EAASH,GACzB,MAAxBtR,EAAS7D,YACTG,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,qDAAqD+D,EAAS7D,eAG/FG,KAAKoV,GAAc,IAAI1V,EAAUgE,EAASrD,YAAc,GAAIqD,EAAS7D,YACrEG,KAAK4U,IAAW,GAEhB5U,KAAK4U,IAAW,EAGpB5U,KAAKqV,GAAarV,KAAKsV,GAAMtV,KAAK8U,GAAME,GAGpC,WACJ,OAAIhV,KAAKuU,SACQvU,KAAKuU,KAGf,KAGH,GAAmBrN,EAAsB7D,GACxC6D,EAAQ9D,UACT8D,EAAQ9D,QAAU,IAElBC,EAEA6D,EAAQ9D,QAAuB,cAAI,UAAUC,IAI7C6D,EAAQ9D,QAAuB,sBAExB8D,EAAQ9D,QAAuB,cAItC,SAAY5C,EAAawU,GAC7B,IACI,KAAOhV,KAAK4U,IAAU,CAElB,MAAMvR,QAAcrD,KAAKiV,KACzBjV,KAAKkV,GAAmBF,EAAa3R,GAErC,IACI,MAAM8R,EAAU,GAAG3U,OAASwE,KAAKwN,QACjCxS,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,oCAAoC2R,MACrE,MAAMzR,QAAiB1D,KAAK8J,EAAY7K,IAAIkW,EAASH,GAEzB,MAAxBtR,EAAS7D,YACTG,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,sDAEvCtF,KAAK4U,IAAW,GACe,MAAxBlR,EAAS7D,YAChBG,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,qDAAqD+D,EAAS7D,eAG/FG,KAAKoV,GAAc,IAAI1V,EAAUgE,EAASrD,YAAc,GAAIqD,EAAS7D,YACrEG,KAAK4U,IAAW,GAGZlR,EAASpD,SACTN,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,0CAA0C9B,EAAcgC,EAASpD,QAASN,KAAKyU,QAC5GzU,KAAK8M,WACL9M,KAAK8M,UAAUpJ,EAASpD,UAI5BN,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,sDAG3C,MAAO0E,GACAlI,KAAK4U,GAIF1M,aAAahI,EAEbF,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,uDAGjCxD,KAAKoV,GAAclN,EACnBlI,KAAK4U,IAAW,GARpB5U,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,wDAAwD0E,EAAEpD,a,QAcvG9E,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,6CAI5BxD,KAAKuV,aACNvV,KAAKwV,MAKV,WAAW7T,GACd,OAAK3B,KAAK4U,GAGHhS,EAAY5C,KAAKyG,EAAS,cAAezG,KAAK8J,EAAa9J,KAAK8U,GAAO9U,KAAKuU,GAAqB5S,EAAM3B,KAAKyU,GAAoBzU,KAAK0U,GAAkB1U,KAAK2U,IAFxJ5L,QAAQC,OAAO,IAAIrJ,MAAM,iDAKjC,aACHK,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,6CAGjCxD,KAAK4U,IAAW,EAChB5U,KAAKwU,GAAWjN,QAEhB,UACUvH,KAAKqV,GAGXrV,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,qDAAqDxD,KAAK8U,OAE3F,MAAM1R,EAAU,IACTjC,EAAM1B,GAAS6D,IACtBF,EAAQjC,GAAQ1B,EAEhB,MAAMgW,EAA6B,CAC/BrS,QAAS,IAAKA,KAAYpD,KAAK2U,IAC/BzR,gBAAiBlD,KAAK0U,IAEpBrR,QAAcrD,KAAKiV,KACzBjV,KAAKkV,GAAmBO,EAAepS,SACjCrD,KAAK8J,EAAY4L,OAAO1V,KAAK8U,GAAOW,GAE1CzV,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,gD,QAEjCxD,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,0CAIjCxD,KAAKwV,MAIL,KACJ,GAAIxV,KAAKgN,QAAS,CACd,IAAI2I,EAAa,gDACb3V,KAAKoV,KACLO,GAAc,WAAa3V,KAAKoV,IAEpCpV,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAOmS,GACjC3V,KAAKgN,QAAQhN,KAAKoV,MC/NvB,MAAMQ,EAcT,YAAY7S,EAAwBC,EAAkEH,EAC1FI,EAA4B4S,EAAgD3S,EAA0BE,GAC9GpD,KAAK8J,EAAc/G,EACnB/C,KAAKuU,GAAsBvR,EAC3BhD,KAAKyG,EAAU5D,EACf7C,KAAKyU,GAAqBxR,EAC1BjD,KAAK0U,GAAmBxR,EACxBlD,KAAK8V,GAA0BD,EAC/B7V,KAAK2U,GAAWvR,EAEhBpD,KAAK8M,UAAY,KACjB9M,KAAKgN,QAAU,KAGZ,cAAcxM,EAAaqO,GAU9B,GATA5N,EAAIuL,WAAWhM,EAAK,OACpBS,EAAIuL,WAAWqC,EAAgB,kBAC/B5N,EAAI4T,KAAKhG,EAAgBuF,EAAgB,kBAEzCpU,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,+BAGjCxD,KAAK8U,GAAOtU,EAERR,KAAKuU,GAAqB,CAC1B,MAAMlR,QAAcrD,KAAKuU,KACrBlR,IACA7C,IAAQA,EAAI2D,QAAQ,KAAO,EAAI,IAAM,KAAO,gBAAgB4R,mBAAmB1S,MAIvF,OAAO,IAAI0F,SAAc,CAACE,EAASD,KAC/B,IAMIgN,EANAC,GAAS,EACb,GAAIpH,IAAmBuF,EAAe8B,KAAtC,CAMA,GAAI5U,EAASE,WAAaF,EAASG,YAC/BuU,EAAc,IAAIhW,KAAK8V,GAAwBtV,EAAK,CAAE0C,gBAAiBlD,KAAK0U,SACzE,CAEH,MAAMhM,EAAU1I,KAAK8J,EAAYC,gBAAgBvJ,GAC3C4C,EAA0B,GAChCA,EAAQ+S,OAASzN,EACjB,MAAOvH,EAAM1B,GAAS6D,IACtBF,EAAQjC,GAAQ1B,EAEhBuW,EAAc,IAAIhW,KAAK8V,GAAwBtV,EAAK,CAAE0C,gBAAiBlD,KAAK0U,GAAkBtR,QAAS,IAAKA,KAAYpD,KAAK2U,MAGjI,IACIqB,EAAYI,UAAalO,IACrB,GAAIlI,KAAK8M,UACL,IACI9M,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,kCAAkC9B,EAAcwG,EAAEvG,KAAM3B,KAAKyU,QAC9FzU,KAAK8M,UAAU5E,EAAEvG,MACnB,MAAOwD,GAEL,YADAnF,KAAKqW,GAAOlR,KAOxB6Q,EAAYrM,QAAWzB,IACnB,MAAM/C,EAAQ,IAAIxF,MAAM,6CACpBsW,EACAjW,KAAKqW,GAAOlR,GAEZ6D,EAAO7D,IAIf6Q,EAAYM,OAAS,KACjBtW,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,oBAAoBtF,KAAK8U,MAChE9U,KAAKuW,GAAeP,EACpBC,GAAS,EACThN,KAEN,MAAOf,GAEL,YADAc,EAAOd,SAhDPc,EAAO,IAAIrJ,MAAM,iFAsDtB,WAAWgC,GACd,OAAK3B,KAAKuW,GAGH3T,EAAY5C,KAAKyG,EAAS,MAAOzG,KAAK8J,EAAa9J,KAAK8U,GAAO9U,KAAKuU,GAAqB5S,EAAM3B,KAAKyU,GAAoBzU,KAAK0U,GAAkB1U,KAAK2U,IAFhJ5L,QAAQC,OAAO,IAAIrJ,MAAM,iDAKjC,OAEH,OADAK,KAAKqW,KACEtN,QAAQE,UAGX,GAAOf,GACPlI,KAAKuW,KACLvW,KAAKuW,GAAaC,QAClBxW,KAAKuW,QAAelN,EAEhBrJ,KAAKgN,SACLhN,KAAKgN,QAAQ9E,KCxHtB,MAAMuO,EAYT,YAAY1T,EAAwBC,EAAkEH,EAC1FI,EAA4ByT,EAA4CtT,GAChFpD,KAAKyG,EAAU5D,EACf7C,KAAKuU,GAAsBvR,EAC3BhD,KAAKyU,GAAqBxR,EAC1BjD,KAAK2W,GAAwBD,EAC7B1W,KAAK8J,EAAc/G,EAEnB/C,KAAK8M,UAAY,KACjB9M,KAAKgN,QAAU,KACfhN,KAAK2U,GAAWvR,EAGb,cAAc5C,EAAaqO,GAM9B,GALA5N,EAAIuL,WAAWhM,EAAK,OACpBS,EAAIuL,WAAWqC,EAAgB,kBAC/B5N,EAAI4T,KAAKhG,EAAgBuF,EAAgB,kBACzCpU,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,sCAE7BxD,KAAKuU,GAAqB,CAC1B,MAAMlR,QAAcrD,KAAKuU,KACrBlR,IACA7C,IAAQA,EAAI2D,QAAQ,KAAO,EAAI,IAAM,KAAO,gBAAgB4R,mBAAmB1S,MAIvF,OAAO,IAAI0F,SAAc,CAACE,EAASD,KAE/B,IAAI4N,EADJpW,EAAMA,EAAIqW,QAAQ,QAAS,MAE3B,MAAMnO,EAAU1I,KAAK8J,EAAYC,gBAAgBvJ,GACjD,IAAIyV,GAAS,EAEb,GAAI3U,EAASmE,OAAQ,CACjB,MAAMrC,EAAU,IACTjC,EAAM1B,GAAS6D,IACtBF,EAAQjC,GAAQ1B,EAEZiJ,IACAtF,EAAgB,OAAI,GAAGsF,KAI3BkO,EAAY,IAAI5W,KAAK2W,GAAsBnW,OAAK6I,EAAW,CACvDjG,QAAS,IAAKA,KAAYpD,KAAK2U,MAIlCiC,IAEDA,EAAY,IAAI5W,KAAK2W,GAAsBnW,IAG3CqO,IAAmBuF,EAAeW,SAClC6B,EAAUE,WAAa,eAI3BF,EAAUN,OAAUS,IAChB/W,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,0BAA0B9E,MACjER,KAAKgX,GAAaJ,EAClBX,GAAS,EACThN,KAGJ2N,EAAUjN,QAAWsN,IACjB,IAAI9R,EAAa,KAGbA,EADsB,oBAAf+R,YAA8BD,aAAiBC,WAC9CD,EAAM9R,MAEN,IAAIxF,MAAM,0CAGtBqJ,EAAO7D,IAGXyR,EAAUR,UAAatR,IAEnB,GADA9E,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,yCAAyC9B,EAAcoD,EAAQnD,KAAM3B,KAAKyU,QACvGzU,KAAK8M,UACL,IACI9M,KAAK8M,UAAUhI,EAAQnD,MACzB,MAAOwD,GAEL,YADAnF,KAAKqW,GAAOlR,KAMxByR,EAAU5J,QAAWiK,IAGjB,GAAIhB,EACAjW,KAAKqW,GAAOY,OACT,CACH,IAAI9R,EAAa,KAGbA,EADsB,oBAAf+R,YAA8BD,aAAiBC,WAC9CD,EAAM9R,MAEN,IAAIxF,MAAM,0CAGtBqJ,EAAO7D,QAMhB,KAAKxD,GACR,OAAI3B,KAAKgX,IAAchX,KAAKgX,GAAWG,aAAenX,KAAK2W,GAAsBS,MAC7EpX,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,wCAAwC9B,EAAcC,EAAM3B,KAAKyU,QAClGzU,KAAKgX,GAAWtW,KAAKiB,GACdoH,QAAQE,WAGZF,QAAQC,OAAO,sCAGnB,OAOH,OANIhJ,KAAKgX,IAGLhX,KAAKqW,QAAOhN,GAGTN,QAAQE,UAGX,GAAOgO,GAEPjX,KAAKgX,KAELhX,KAAKgX,GAAWhK,QAAU,OAC1BhN,KAAKgX,GAAWZ,UAAY,OAC5BpW,KAAKgX,GAAWrN,QAAU,OAC1B3J,KAAKgX,GAAWR,QAChBxW,KAAKgX,QAAa3N,GAGtBrJ,KAAKyG,EAAQlD,IAAI/E,EAASgF,MAAO,yCAC7BxD,KAAKgN,WACDhN,KAAKqX,GAAcJ,KAA8B,IAAnBA,EAAMK,UAAqC,MAAfL,EAAMM,KAEzDN,aAAiBtX,MACxBK,KAAKgN,QAAQiK,GAEbjX,KAAKgN,UAJLhN,KAAKgN,QAAQ,IAAIrN,MAAM,sCAAsCsX,EAAMM,SAASN,EAAMO,cAStF,GAAcP,GAClB,OAAOA,GAAmC,kBAAnBA,EAAMK,UAAgD,iBAAfL,EAAMM,MCrIrE,MAAME,EAyBT,YAAYjX,EAAaC,EAAkC,IfsDxD,IAAsBoC,Ee9CrB,GArBI,KAAA6U,GAA4D,OAKpD,KAAA/F,SAAgB,GAMf,KAAAgG,GAA4B,EAGzC1W,EAAIuL,WAAWhM,EAAK,OAEpBR,KAAKyG,OfoDM4C,KADUxG,EenDOpC,EAAQoC,QfqD7B,IAAI2B,EAAchG,EAAS8G,aAGvB,OAAXzC,EACOjC,EAAWG,cAGUsI,IAA3BxG,EAAmBU,IACbV,EAGJ,IAAI2B,EAAc3B,Ge/DrB7C,KAAKgO,QAAUhO,KAAK4X,GAAYpX,IAEhCC,EAAUA,GAAW,IACbwC,uBAAkDoG,IAA9B5I,EAAQwC,mBAA0CxC,EAAQwC,kBAC/C,kBAA5BxC,EAAQyC,sBAA6DmG,IAA5B5I,EAAQyC,gBAGxD,MAAM,IAAIvD,MAAM,mEAFhBc,EAAQyC,qBAA8CmG,IAA5B5I,EAAQyC,iBAAuCzC,EAAQyC,gBAKrF,IAAI2U,EAAuB,KACvBC,EAAyB,KAE7B,GAAIxW,EAASmE,OAA0C,CAGnD,MAAMkB,EAA0D,QAChEkR,EAAkBlR,EAAY,MAC9BmR,EAAoBnR,EAAY,eAG/BrF,EAASmE,QAA+B,oBAAdsS,WAA8BtX,EAAQsX,UAE1DzW,EAASmE,SAAWhF,EAAQsX,WAC/BF,IACApX,EAAQsX,UAAYF,GAHxBpX,EAAQsX,UAAYA,UAOnBzW,EAASmE,QAAiC,oBAAhBuS,aAAgCvX,EAAQuX,YAE5D1W,EAASmE,SAAWhF,EAAQuX,kBACF,IAAtBF,IACPrX,EAAQuX,YAAcF,GAH1BrX,EAAQuX,YAAcA,YAO1BhY,KAAK8J,EAAcrJ,EAAQsC,YAAc,IAAI8G,EAAkB7J,KAAKyG,GACpEzG,KAAKyN,EAAmB,eACxBzN,KAAK2N,GAAqB,EAC1B3N,KAAKiY,GAAWxX,EAEhBT,KAAK8M,UAAY,KACjB9M,KAAKgN,QAAU,KAKZ,YAAY6B,GAOf,GANAA,EAAiBA,GAAkBuF,EAAeW,OAElD9T,EAAI4T,KAAKhG,EAAgBuF,EAAgB,kBAEzCpU,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,6CAA6C+F,EAAevF,QAE/D,iBAA1B7O,KAAKyN,EACL,OAAO1E,QAAQC,OAAO,IAAIrJ,MAAM,4EASpC,GANAK,KAAKyN,EAAmB,aAExBzN,KAAKkY,GAAwBlY,KAAKsO,EAAeO,SAC3C7O,KAAKkY,GAG0B,kBAAjClY,KAAKyN,EAA2D,CAEhE,MAAM3I,EAAU,+DAMhB,OALA9E,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAOmF,SAG3B9E,KAAKsP,EAEJvG,QAAQC,OAAO,IAAIrJ,MAAMmF,IAC7B,GAAqC,cAAjC9E,KAAKyN,EAAuD,CAEnE,MAAM3I,EAAU,8GAEhB,OADA9E,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAOmF,GAC1BiE,QAAQC,OAAO,IAAIrJ,MAAMmF,IAGpC9E,KAAK2N,GAAqB,EAGvB,KAAKhM,GACR,MAA8B,cAA1B3B,KAAKyN,EACE1E,QAAQC,OAAO,IAAIrJ,MAAM,yEAG/BK,KAAKmY,KACNnY,KAAKmY,GAAa,IAAIC,EAAmBpY,KAAKqY,YAI3CrY,KAAKmY,GAAWzX,KAAKiB,IAGzB,WAAWwD,GACd,MAA8B,iBAA1BnF,KAAKyN,GACLzN,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,+BAA+BlJ,2EACzD4D,QAAQE,WAGW,kBAA1BjJ,KAAKyN,GACLzN,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,+BAA+BlJ,4EACzDnF,KAAKsP,IAGhBtP,KAAKyN,EAAmB,gBAExBzN,KAAKsP,EAAe,IAAIvG,SAASE,IAE7BjJ,KAAK0X,GAAuBzO,WAI1BjJ,KAAKuP,EAAcpK,cACnBnF,KAAKsP,GAGP,QAAoBnK,GAIxBnF,KAAKsY,GAAanT,EAElB,UACUnF,KAAKkY,GACb,MAAOhQ,IAOT,GAAIlI,KAAKqY,UAAW,CAChB,UACUrY,KAAKqY,UAAUjJ,OACvB,MAAOlH,GACLlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,gDAAgDuI,OACjFlI,KAAKuY,KAGTvY,KAAKqY,eAAYhP,OAEjBrJ,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,0FAIjC,QAAqBQ,GAGzB,IAAIrO,EAAMR,KAAKgO,QACfhO,KAAKuU,GAAsBvU,KAAKiY,GAASjV,mBAEzC,IACI,GAAIhD,KAAKiY,GAASO,gBAAiB,CAC/B,GAAIxY,KAAKiY,GAASI,YAAclE,EAAkBsE,WAO9C,MAAM,IAAI9Y,MAAM,gFALhBK,KAAKqY,UAAYrY,KAAK0Y,GAAoBvE,EAAkBsE,kBAGtDzY,KAAK2Y,GAAgBnY,EAAKqO,OAIjC,CACH,IAAI+J,EAA+C,KAC/CC,EAAY,EAEhB,EAAG,CAGC,GAFAD,QAA0B5Y,KAAK8Y,GAAwBtY,GAEzB,kBAA1BR,KAAKyN,GAAgF,iBAA1BzN,KAAKyN,EAChE,MAAM,IAAI9N,MAAM,kDAGpB,GAAIiZ,EAAkBzT,MAClB,MAAM,IAAIxF,MAAMiZ,EAAkBzT,OAGtC,GAAKyT,EAA0BG,gBAC3B,MAAM,IAAIpZ,MAAM,gMAOpB,GAJIiZ,EAAkBpY,MAClBA,EAAMoY,EAAkBpY,KAGxBoY,EAAkBI,YAAa,CAG/B,MAAMA,EAAcJ,EAAkBI,YACtChZ,KAAKuU,GAAsB,IAAMyE,EAGrCH,UAEGD,EAAkBpY,KAAOqY,EAtO1B,KAwON,GAxOM,MAwOFA,GAA+BD,EAAkBpY,IACjD,MAAM,IAAIb,MAAM,+CAGdK,KAAKiZ,GAAiBzY,EAAKR,KAAKiY,GAASI,UAAWO,EAAmB/J,GAG7E7O,KAAKqY,qBAAqB/D,IAC1BtU,KAAK2R,SAASC,mBAAoB,GAGR,eAA1B5R,KAAKyN,IAGLzN,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,8CACjCrO,KAAKyN,EAAmB,aAM9B,MAAOvF,GAOL,OANAlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,mCAAqCuI,GACtElI,KAAKyN,EAAmB,eACxBzN,KAAKqY,eAAYhP,EAGjBrJ,KAAK0X,KACE3O,QAAQC,OAAOd,IAItB,SAA8B1H,GAClC,MAAM4C,EAAU,GAChB,GAAIpD,KAAKuU,GAAqB,CAC1B,MAAMlR,QAAcrD,KAAKuU,KACrBlR,IACAD,EAAuB,cAAI,UAAUC,KAI7C,MAAOlC,EAAM1B,GAAS6D,IACtBF,EAAQjC,GAAQ1B,EAEhB,MAAMyZ,EAAelZ,KAAKmZ,GAAqB3Y,GAC/CR,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,gCAAgC6K,MACjE,IACI,MAAMxV,QAAiB1D,KAAK8J,EAAYnG,KAAKuV,EAAc,CACvD5Y,QAAS,GACT8C,QAAS,IAAKA,KAAYpD,KAAKiY,GAAS7U,SACxCF,gBAAiBlD,KAAKiY,GAAS/U,kBAGnC,GAA4B,MAAxBQ,EAAS7D,WACT,OAAOkJ,QAAQC,OAAO,IAAIrJ,MAAM,mDAAmD+D,EAAS7D,gBAGhG,MAAM+Y,EAAoBhO,KAAKc,MAAMhI,EAASpD,SAM9C,QALKsY,EAAkBQ,kBAAoBR,EAAkBQ,iBAAmB,KAG5ER,EAAkBS,gBAAkBT,EAAkB7K,cAEnD6K,EACT,MAAO1Q,GAEL,OADAlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,mDAAqDuI,GAC/Ea,QAAQC,OAAOd,IAItB,GAAkB1H,EAAa6Y,GACnC,OAAKA,EAIE7Y,IAA6B,IAAtBA,EAAI2D,QAAQ,KAAc,IAAM,KAAO,MAAMkV,IAHhD7Y,EAMP,SAAuBA,EAAa8Y,EAAgEV,EAAuCW,GAC/I,IAAIC,EAAaxZ,KAAKyZ,GAAkBjZ,EAAKoY,EAAkBS,iBAC/D,GAAIrZ,KAAK0Z,GAAcJ,GAMnB,OALAtZ,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,2EACjCrO,KAAKqY,UAAYiB,QACXtZ,KAAK2Y,GAAgBa,EAAYD,QAEvCvZ,KAAK+N,aAAe6K,EAAkB7K,cAI1C,MAAM4L,EAA6B,GAC7BC,EAAahB,EAAkBiB,qBAAuB,GAC5D,IAAIC,EAA4ClB,EAChD,IAAK,MAAMmB,KAAYH,EAAY,CAC/B,MAAMI,EAAmBha,KAAKia,GAAyBF,EAAUT,EAAoBC,GACrF,GAAIS,aAA4Bra,MAE5Bga,EAAoBxN,KAAK,GAAG4N,EAAS1B,qBAAqB2B,UACvD,GAAIha,KAAK0Z,GAAcM,GAAmB,CAE7C,GADAha,KAAKqY,UAAY2B,GACZF,EAAW,CACZ,IACIA,QAAkB9Z,KAAK8Y,GAAwBtY,GACjD,MAAO0Z,GACL,OAAOnR,QAAQC,OAAOkR,GAE1BV,EAAaxZ,KAAKyZ,GAAkBjZ,EAAKsZ,EAAUT,iBAEvD,IAGI,aAFMrZ,KAAK2Y,GAAgBa,EAAYD,QACvCvZ,KAAK+N,aAAe+L,EAAU/L,cAEhC,MAAOmM,GAKL,GAJAla,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,kCAAkCoa,EAAS1B,eAAe6B,KAC3FJ,OAAYzQ,EACZsQ,EAAoBxN,KAAK,GAAG4N,EAAS1B,qBAAqB6B,KAE5B,eAA1Bla,KAAKyN,EAAiD,CACtD,MAAM3I,EAAU,uDAEhB,OADA9E,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAOvJ,GAC1BiE,QAAQC,OAAO,IAAIrJ,MAAMmF,OAMhD,OAAI6U,EAAoBpX,OAAS,EACtBwG,QAAQC,OAAO,IAAIrJ,MAAM,yEAAyEga,EAAoB9Q,KAAK,SAE/HE,QAAQC,OAAO,IAAIrJ,MAAM,gFAG5B,GAAoB0Y,GACxB,OAAQA,GACJ,KAAKlE,EAAkBsE,WACnB,IAAKzY,KAAKiY,GAASF,UACf,MAAM,IAAIpY,MAAM,qDAEpB,OAAO,IAAI8W,EAAmBzW,KAAK8J,EAAa9J,KAAKuU,GAAqBvU,KAAKyG,EAASzG,KAAKiY,GAAShV,oBAAqB,EAAOjD,KAAKiY,GAASF,UAAW/X,KAAKiY,GAAS7U,SAAW,IACxL,KAAK+Q,EAAkBgG,iBACnB,IAAKna,KAAKiY,GAASD,YACf,MAAM,IAAIrY,MAAM,uDAEpB,OAAO,IAAIiW,EAA0B5V,KAAK8J,EAAa9J,KAAKuU,GAAqBvU,KAAKyG,EAASzG,KAAKiY,GAAShV,oBAAqB,EAAOjD,KAAKiY,GAASD,YAAahY,KAAKiY,GAAS/U,gBAAkBlD,KAAKiY,GAAS7U,SAAW,IACjO,KAAK+Q,EAAkBiG,YACnB,OAAO,IAAI9F,EAAqBtU,KAAK8J,EAAa9J,KAAKuU,GAAqBvU,KAAKyG,EAASzG,KAAKiY,GAAShV,oBAAqB,EAAOjD,KAAKiY,GAAS/U,gBAAkBlD,KAAKiY,GAAS7U,SAAW,IACjM,QACI,MAAM,IAAIzD,MAAM,sBAAsB0Y,OAI1C,GAAgB7X,EAAaqO,GAGjC,OAFA7O,KAAKqY,UAAWvL,UAAY9M,KAAK8M,UACjC9M,KAAKqY,UAAWrL,QAAW9E,GAAMlI,KAAKuY,GAAgBrQ,GAC/ClI,KAAKqY,UAAWgC,QAAQ7Z,EAAKqO,GAGhC,GAAyBkL,EAA+BT,EAAmDC,GAC/G,MAAMlB,EAAYlE,EAAkB4F,EAAS1B,WAC7C,GAAIA,QAEA,OADArY,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,uBAAuB0L,EAAS1B,0DAC1D,IAAI1Y,MAAM,uBAAuBoa,EAAS1B,0DAEjD,IA0HZ,SAA0BiB,EAAmDgB,GACzE,OAAQhB,GAAkE,IAA1CgB,EAAkBhB,GA3HtCiB,CAAiBjB,EAAoBjB,GAqBrC,OADArY,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,uBAAuB8F,EAAkBkE,8CACnE,IAAI1Y,MAAM,IAAIwU,EAAkBkE,kCAnBvC,KADwB0B,EAASS,gBAAgBC,KAAKC,GAAMtG,EAAesG,KACvDvW,QAAQoV,IAA4B,GAepD,OADAvZ,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,uBAAuB8F,EAAkBkE,kEAA0EjE,EAAemF,QAC5J,IAAI5Z,MAAM,IAAIwU,EAAkBkE,wBAAgCjE,EAAemF,OAdtF,GAAKlB,IAAclE,EAAkBsE,aAAezY,KAAKiY,GAASF,WAC7DM,IAAclE,EAAkBgG,mBAAqBna,KAAKiY,GAASD,YAEpE,OADAhY,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,uBAAuB8F,EAAkBkE,yDACnE,IAAI1Y,MAAM,IAAIwU,EAAkBkE,6CAEvCrY,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,wBAAwB8F,EAAkBkE,QAC3E,IACI,OAAOrY,KAAK0Y,GAAoBL,GAClC,MAAO6B,GACL,OAAOA,GAcvB,GAAc7B,GAClB,OAAOA,GAAoC,iBAAhB,GAA4B,YAAaA,EAGhE,GAAgBlT,GASpB,GARAnF,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,iCAAiClJ,4BAAgCnF,KAAKyN,MAEvGzN,KAAKqY,eAAYhP,EAGjBlE,EAAQnF,KAAKsY,IAAcnT,EAC3BnF,KAAKsY,QAAajP,EAEY,iBAA1BrJ,KAAKyN,EAAT,CAKA,GAA8B,eAA1BzN,KAAKyN,EAEL,MADAzN,KAAKyG,EAAQlD,IAAI/E,EAAS4G,QAAS,yCAAyCD,2EACtE,IAAIxF,MAAM,iCAAiCwF,wEAyBrD,GAtB8B,kBAA1BnF,KAAKyN,GAGLzN,KAAK0X,KAGLvS,EACAnF,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,uCAAuCwF,OAExEnF,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,4BAGvCtF,KAAKmY,KACLnY,KAAKmY,GAAW/I,OAAO9K,OAAO4D,IAC1BlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,0CAA0CuI,UAE/ElI,KAAKmY,QAAa9O,GAGtBrJ,KAAK+N,kBAAe1E,EACpBrJ,KAAKyN,EAAmB,eAEpBzN,KAAK2N,EAAoB,CACzB3N,KAAK2N,GAAqB,EAC1B,IACQ3N,KAAKgN,SACLhN,KAAKgN,QAAQ7H,GAEnB,MAAO+C,GACLlI,KAAKyG,EAAQlD,IAAI/E,EAASmB,MAAO,0BAA0BwF,mBAAuB+C,cAtCtFlI,KAAKyG,EAAQlD,IAAI/E,EAAS6P,MAAO,yCAAyClJ,+EA2C1E,GAAY3E,GAEhB,GAAuC,IAAnCA,EAAIma,YAAY,WAAY,IAA8C,IAAlCna,EAAIma,YAAY,UAAW,GACnE,OAAOna,EAGX,IAAKc,EAASE,YAAcD,OAAOqZ,SAC/B,MAAM,IAAIjb,MAAM,mBAAmBa,OAQvC,MAAMqa,EAAOtZ,OAAOqZ,SAASE,cAAc,KAI3C,OAHAD,EAAKE,KAAOva,EAEZR,KAAKyG,EAAQlD,IAAI/E,EAAS8G,YAAa,gBAAgB9E,UAAYqa,EAAKE,UACjEF,EAAKE,KAGR,GAAqBva,GACzB,MAAMyD,EAAQzD,EAAI2D,QAAQ,KAC1B,IAAI+U,EAAe1Y,EAAIiL,UAAU,GAAc,IAAXxH,EAAezD,EAAI+B,OAAS0B,GAWhE,MAV8C,MAA1CiV,EAAaA,EAAa3W,OAAS,KACnC2W,GAAgB,KAEpBA,GAAgB,YAChBA,IAA2B,IAAXjV,EAAe,GAAKzD,EAAIiL,UAAUxH,IAEA,IAA9CiV,EAAa/U,QAAQ,sBACrB+U,IAA2B,IAAXjV,EAAe,IAAM,IACrCiV,GAAgB,oBAAsBlZ,KAAK2X,IAExCuB,GASR,MAAMd,EAOT,YAA6B4C,GAAA,KAAAA,KANrB,KAAAC,GAAiB,GAEjB,KAAAC,IAAsB,EAK1Blb,KAAKmb,GAAoB,IAAIC,EAC7Bpb,KAAKqb,GAAmB,IAAID,EAE5Bpb,KAAKsb,GAAmBtb,KAAKub,KAG1B,KAAK5Z,GAKR,OAJA3B,KAAKwb,GAAY7Z,GACZ3B,KAAKqb,KACNrb,KAAKqb,GAAmB,IAAID,GAEzBpb,KAAKqb,GAAiBI,QAG1B,OAGH,OAFAzb,KAAKkb,IAAa,EAClBlb,KAAKmb,GAAkBlS,UAChBjJ,KAAKsb,GAGR,GAAY3Z,GAChB,GAAI3B,KAAKib,GAAQ1Y,eAAiBvC,KAAKib,GAAQ,WAAc,EACzD,MAAM,IAAItb,MAAM,sCAAsCK,KAAY,6BAA2B,KAGjGA,KAAKib,GAAQ9O,KAAKxK,GAClB3B,KAAKmb,GAAkBlS,UAGnB,WACJ,OAAa,CAGT,SAFMjJ,KAAKmb,GAAkBM,SAExBzb,KAAKkb,GAAY,CACdlb,KAAKqb,IACLrb,KAAKqb,GAAiBrS,OAAO,uBAGjC,MAGJhJ,KAAKmb,GAAoB,IAAIC,EAE7B,MAAMM,EAAkB1b,KAAKqb,GAC7Brb,KAAKqb,QAAmBhS,EAExB,MAAM1H,EAAmC,iBAArB3B,KAAKib,GAAQ,GAC7Bjb,KAAKib,GAAQpS,KAAK,IAClBuP,EAAmBuD,GAAe3b,KAAKib,IAE3Cjb,KAAKib,GAAQ1Y,OAAS,EAEtB,UACUvC,KAAKgb,GAAWta,KAAKiB,GAC3B+Z,EAAgBzS,UAClB,MAAO9D,GACLuW,EAAgB1S,OAAO7D,KAK3B,UAAsByW,GAC1B,MAAMC,EAAcD,EAAanB,KAAKqB,GAAMA,EAAE/Z,aAAYga,QAAO,CAACC,EAAGF,IAAME,EAAIF,IACzEjL,EAAS,IAAI5O,WAAW4Z,GAC9B,IAAII,EAAS,EACb,IAAK,MAAMlQ,KAAQ6P,EACf/K,EAAOqL,IAAI,IAAIja,WAAW8J,GAAOkQ,GACjCA,GAAUlQ,EAAKhK,WAGnB,OAAO8O,EAAOtF,QAItB,MAAM6P,EAKF,cACIpb,KAAKyb,QAAU,IAAI1S,SAAQ,CAACE,EAASD,KAAYhJ,KAAKmc,GAAWnc,KAAKoc,IAAa,CAACnT,EAASD,KAG1F,UACHhJ,KAAKmc,KAGF,OAAO3E,GACVxX,KAAKoc,GAAW5E,ICpoBjB,MAAM6E,EAAb,cAGoB,KAAAlb,KANmB,OAQnB,KAAA0E,QAAkB,EAGlB,KAAAgJ,eAAiCuF,EAAe8B,KAOzD,cAAc/L,EAAetH,GAEhC,GAAqB,iBAAVsH,EACP,MAAM,IAAIxK,MAAM,2DAGpB,IAAKwK,EACD,MAAO,GAGI,OAAXtH,IACAA,EAASjC,EAAWG,UAIxB,MAAMqJ,EAAWJ,EAAkB0B,MAAMvB,GAEnCmS,EAAc,GACpB,IAAK,MAAMxX,KAAWsF,EAAU,CAC5B,MAAMmS,EAAgB3R,KAAKc,MAAM5G,GACjC,GAAkC,iBAAvByX,EAAc5Q,KACrB,MAAM,IAAIhM,MAAM,oBAEpB,OAAQ4c,EAAc5Q,MAClB,KAAKC,EAAYyF,WACbrR,KAAKwc,GAAqBD,GAC1B,MACJ,KAAK3Q,EAAY2F,WACbvR,KAAKyc,GAAqBF,GAC1B,MACJ,KAAK3Q,EAAY6E,WACbzQ,KAAK0c,GAAqBH,GAC1B,MACJ,KAAK3Q,EAAYkC,KAGjB,KAAKlC,EAAY4F,MAEb,MACJ,QAEI3O,EAAOU,IAAI/E,EAAS8G,YAAa,yBAA2BiX,EAAc5Q,KAAO,cACjF,SAER2Q,EAAYnQ,KAAKoQ,GAGrB,OAAOD,EAQJ,aAAaxX,GAChB,OAAOkF,EAAkBW,MAAMC,KAAKC,UAAU/F,IAG1C,GAAqBA,GACzB9E,KAAK2c,GAAsB7X,EAAQoN,OAAQ,gDAEd7I,IAAzBvE,EAAQuL,cACRrQ,KAAK2c,GAAsB7X,EAAQuL,aAAc,2CAIjD,GAAqBvL,GAGzB,GAFA9E,KAAK2c,GAAsB7X,EAAQuL,aAAc,gDAE5BhH,IAAjBvE,EAAQiH,KACR,MAAM,IAAIpM,MAAM,2CAIhB,GAAqBmF,GACzB,GAAIA,EAAQ+L,QAAU/L,EAAQK,MAC1B,MAAM,IAAIxF,MAAM,4CAGfmF,EAAQ+L,QAAU/L,EAAQK,OAC3BnF,KAAK2c,GAAsB7X,EAAQK,MAAO,2CAG9CnF,KAAK2c,GAAsB7X,EAAQuL,aAAc,2CAG7C,GAAsB5Q,EAAYG,GACtC,GAAqB,iBAAVH,GAAgC,KAAVA,EAC7B,MAAM,IAAIE,MAAMC,ICpG5B,MAAMgd,EAAsB,CACxBC,MAAOre,EAASgF,MAChBsZ,MAAOte,EAAS6P,MAChB9I,KAAM/G,EAAS8G,YACfyX,YAAave,EAAS8G,YACtBD,KAAM7G,EAAS4G,QACf4X,QAASxe,EAAS4G,QAClBD,MAAO3G,EAASmB,MAChBsd,SAAUze,EAAS0G,SACnBgY,KAAM1e,EAAS2e,MAgBZ,MAAMC,EA0CF,iBAAiBC,GAGpB,GAFApc,EAAIuL,WAAW6Q,EAAS,gBAoINhU,IAlILgU,EAkIH9Z,IAjINvD,KAAK6C,OAASwa,OACX,GAAuB,iBAAZA,EAAsB,CACpC,MAAMxY,EA7DlB,SAAuB1D,GAInB,MAAMmc,EAAUV,EAAoBzb,EAAK4P,eACzC,QAAuB,IAAZuM,EACP,OAAOA,EAEP,MAAM,IAAI3d,MAAM,sBAAsBwB,KAqDjBoc,CAAcF,GAC/Brd,KAAK6C,OAAS,IAAI2B,EAAcK,QAEhC7E,KAAK6C,OAAS,IAAI2B,EAAc6Y,GAGpC,OAAOrd,KA2BJ,QAAQQ,EAAagd,GAiBxB,OAhBAvc,EAAIuL,WAAWhM,EAAK,OACpBS,EAAIwc,WAAWjd,EAAK,OAEpBR,KAAKQ,IAAMA,EAKPR,KAAK0d,sBAD6B,iBAA3BF,EACsB,IAAKxd,KAAK0d,yBAA0BF,GAEpC,IACtBxd,KAAK0d,sBACRrF,UAAWmF,GAIZxd,KAOJ,gBAAgBsM,GAInB,OAHArL,EAAIuL,WAAWF,EAAU,YAEzBtM,KAAKsM,SAAWA,EACTtM,KAoBJ,uBAAuB2d,GAC1B,GAAI3d,KAAKuM,gBACL,MAAM,IAAI5M,MAAM,2CAWpB,OARKge,EAEMtS,MAAMuS,QAAQD,GACrB3d,KAAKuM,gBAAkB,IAAIwH,EAAuB4J,GAElD3d,KAAKuM,gBAAkBoR,EAJvB3d,KAAKuM,gBAAkB,IAAIwH,EAOxB/T,KAOJ,QAGH,MAAM0d,EAAwB1d,KAAK0d,uBAAyB,GAS5D,QANqCrU,IAAjCqU,EAAsB7a,SAEtB6a,EAAsB7a,OAAS7C,KAAK6C,SAInC7C,KAAKQ,IACN,MAAM,IAAIb,MAAM,4FAEpB,MAAM0M,EAAa,IAAIoL,EAAezX,KAAKQ,IAAKkd,GAEhD,OAAOtR,EAAcyR,OACjBxR,EACArM,KAAK6C,QAAUjC,EAAWG,SAC1Bf,KAAKsM,UAAY,IAAI+P,EACrBrc,KAAKuM,kB,OC3MZtK,WAAW7C,UAAU+E,SACtBrF,OAAOC,eAAekD,WAAW7C,UAAW,UAAW,CACnDK,MAAO4L,MAAMjM,UAAU+E,QACvB2Z,UAAU,IAGb7b,WAAW7C,UAAUkM,OACtBxM,OAAOC,eAAekD,WAAW7C,UAAW,QAAS,CAGjDK,MAAO,SAASmP,EAAgBmP,GAAgB,OAAO,IAAI9b,WAAWoJ,MAAMjM,UAAUkM,MAAMhM,KAAKU,KAAM4O,EAAOmP,KAC9GD,UAAU,IAGb7b,WAAW7C,UAAU+C,SACtBrD,OAAOC,eAAekD,WAAW7C,UAAW,UAAW,CACnDK,MAAO4L,MAAMjM,UAAU+C,QACvB2b,UAAU,I,O3BxBK,iBAAZpf,SAA0C,iBAAXsf,OACxCA,OAAOtf,QAAUJ,IACQ,mBAAX2f,QAAyBA,OAAOC,IAC9CD,OAAO,GAAI3f,GACe,iBAAZI,QACdA,QAAiB,QAAIJ,IAErBD,EAAc,QAAIC","file":"signalr.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"signalR\"] = factory();\n\telse\n\t\troot[\"signalR\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // tslint:disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n                                  content: string | ArrayBuffer, logMessageContent: boolean, withCredentials: boolean, defaultHeaders: MessageHeaders): Promise<void> {\r\n    let headers = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...defaultHeaders},\r\n        responseType,\r\n        withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n /*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n /*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this._fetchType = fetch.bind(self);\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content!,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            throw new HttpError(response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: ((...args: any[]) => void)[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                throw this._stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // tslint:disable-next-line:no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupPingTimer();\r\n        this._pingServerHandle = setTimeout(async () => {\r\n            if (this._connectionState === HubConnectionState.Connected) {\r\n                try {\r\n                    await this._sendMessage(this._cachedPingMessage);\r\n                } catch {\r\n                    // We don't care about the error. It should be seen elsewhere in the client.\r\n                    // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                    this._cleanupPingTimer();\r\n                }\r\n            }\r\n        }, this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error);\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // tslint:disable-next-line:forin\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _withCredentials: boolean;\r\n    private readonly _pollAbort: AbortController;\r\n    private readonly _headers: MessageHeaders;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean, withCredentials: boolean, headers: MessageHeaders) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._logMessageContent = logMessageContent;\r\n        this._withCredentials = withCredentials;\r\n        this._headers = headers;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _getAccessToken(): Promise<string | null> {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, this._accessTokenFactory, data, this._logMessageContent, this._withCredentials, this._headers);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._headers },\r\n                withCredentials: this._withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _withCredentials: boolean;\r\n    private readonly _eventSourceConstructor: EventSourceConstructor;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor, withCredentials: boolean, headers: MessageHeaders) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._logMessageContent = logMessageContent;\r\n        this._withCredentials = withCredentials;\r\n        this._eventSourceConstructor = eventSourceConstructor;\r\n        this._headers = headers;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._eventSourceConstructor(url, { withCredentials: this._withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._eventSourceConstructor(url, { withCredentials: this._withCredentials, headers: { ...headers, ...this._headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    const error = new Error(\"Error occurred while starting EventSource\");\r\n                    if (opened) {\r\n                        this._close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, this._accessTokenFactory, data, this._logMessageContent, this._withCredentials, this._headers);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[`Cookie`] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[`Authorization`] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed: ${transportOrError}`);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(`${endpoint.transport} failed: ${ex}`);\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent || false, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent || false, this._options.EventSource, this._options.withCredentials!, this._options.headers || {});\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent || false, this._options.withCredentials!, this._options.headers || {});\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Error(`'${HttpTransportType[transport]}' is not supported in your environment.`);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Error(`'${HttpTransportType[transport]}' is disabled by the client.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\r\n\r\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\r\n// that exist on Uint8Array with the same name, and JavaScript is magic.\r\n// We make them 'writable' because the Buffer polyfill messes with it as well.\r\nif (!Uint8Array.prototype.indexOf) {\r\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\r\n        value: Array.prototype.indexOf,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.slice) {\r\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n        // wrap the slice in Uint8Array so it looks like a Uint8Array.slice call\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        value: function(start?: number, end?: number) { return new Uint8Array(Array.prototype.slice.call(this, start, end)); },\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.forEach) {\r\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\r\n        value: Array.prototype.forEach,\r\n        writable: true,\r\n    });\r\n}\r\n\r\nexport * from \"./index\";\r\n"],"sourceRoot":""}