var t,e;t=self,e=function(){return(()=>{var t,e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"t",{value:!0})}},s={};e.r(s),e.d(s,{AbortError:()=>r,DefaultHttpClient:()=>C,HttpClient:()=>h,HttpError:()=>i,HttpResponse:()=>o,HttpTransportType:()=>A,HubConnection:()=>I,HubConnectionBuilder:()=>F,HubConnectionState:()=>T,JsonHubProtocol:()=>W,LogLevel:()=>t,MessageType:()=>k,NullLogger:()=>c,Subject:()=>_,TimeoutError:()=>n,TransferFormat:()=>U,VERSION:()=>a});class i extends Error{constructor(t,e){const s=new.target.prototype;super(t),this.statusCode=e,this.__proto__=s}}class n extends Error{constructor(t="A timeout occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class r extends Error{constructor(t="An abort occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class o{constructor(t,e,s){this.statusCode=t,this.statusText=e,this.content=s}}class h{get(t,e){return this.send({...e,method:"GET",url:t})}post(t,e){return this.send({...e,method:"POST",url:t})}delete(t,e){return this.send({...e,method:"DELETE",url:t})}getCookieString(t){return""}}!function(t){t[t.Trace=0]="Trace",t[t.Debug=1]="Debug",t[t.Information=2]="Information",t[t.Warning=3]="Warning",t[t.Error=4]="Error",t[t.Critical=5]="Critical",t[t.None=6]="None"}(t||(t={}));class c{constructor(){}log(t,e){}}c.instance=new c;const a="6.0.0-preview.3.21201.13";class l{static isRequired(t,e){if(null==t)throw new Error(`The '${e}' argument is required.`)}static isNotEmpty(t,e){if(!t||t.match(/^\s*$/))throw new Error(`The '${e}' argument should not be empty.`)}static isIn(t,e,s){if(!(t in e))throw new Error(`Unknown ${s} value: ${t}.`)}}class u{static get isBrowser(){return"object"==typeof window}static get isWebWorker(){return"object"==typeof self&&"importScripts"in self}static get isNode(){return!this.isBrowser&&!this.isWebWorker}}function d(t,e){let s="";return p(t)?(s=`Binary data of length ${t.byteLength}`,e&&(s+=`. Content: '${function(t){const e=new Uint8Array(t);let s="";return e.forEach((t=>{s+=`0x${t<16?"0":""}${t.toString(16)} `})),s.substr(0,s.length-1)}(t)}'`)):"string"==typeof t&&(s=`String data of length ${t.length}`,e&&(s+=`. Content: '${t}'`)),s}function p(t){return t&&"undefined"!=typeof ArrayBuffer&&(t instanceof ArrayBuffer||t.constructor&&"ArrayBuffer"===t.constructor.name)}async function f(e,s,i,n,r,o,h,c,a){let l={};if(r){const t=await r();t&&(l={Authorization:`Bearer ${t}`})}const[u,f]=m();l[u]=f,e.log(t.Trace,`(${s} transport) sending data. ${d(o,h)}.`);const w=p(o)?"arraybuffer":"text",g=await i.post(n,{content:o,headers:{...l,...a},responseType:w,withCredentials:c});e.log(t.Trace,`(${s} transport) request complete. Response status: ${g.statusCode}.`)}class w{constructor(t,e){this.i=t,this.h=e}dispose(){const t=this.i.observers.indexOf(this.h);t>-1&&this.i.observers.splice(t,1),0===this.i.observers.length&&this.i.cancelCallback&&this.i.cancelCallback().catch((t=>{}))}}class g{constructor(t){this.l=t,this.out=console}log(e,s){if(e>=this.l){const i=`[${(new Date).toISOString()}] ${t[e]}: ${s}`;switch(e){case t.Critical:case t.Error:this.out.error(i);break;case t.Warning:this.out.warn(i);break;case t.Information:this.out.info(i);break;default:this.out.log(i)}}}}function m(){let t="X-SignalR-User-Agent";return u.isNode&&(t="User-Agent"),[t,y(a,b(),u.isNode?"NodeJS":"Browser",v())]}function y(t,e,s,i){let n="Microsoft SignalR/";const r=t.split(".");return n+=`${r[0]}.${r[1]}`,n+=` (${t}; `,n+=e&&""!==e?`${e}; `:"Unknown OS; ",n+=`${s}`,n+=i?`; ${i}`:"; Unknown Runtime Version",n+=")",n}function b(){if(!u.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function v(){if(u.isNode)return process.versions.node}class E extends h{constructor(t){if(super(),this.u=t,"undefined"==typeof fetch){const t=require;this.p=new(t("tough-cookie").CookieJar),this.g=t("node-fetch"),this.g=t("fetch-cookie")(this.g,this.p),this.m=t("abort-controller")}else this.g=fetch.bind(self),this.m=AbortController}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new r;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const s=new this.m;let h;e.abortSignal&&(e.abortSignal.onabort=()=>{s.abort(),h=new r});let c,a=null;if(e.timeout){const i=e.timeout;a=setTimeout((()=>{s.abort(),this.u.log(t.Warning,"Timeout from HTTP request."),h=new n}),i)}try{c=await this.g(e.url,{body:e.content,cache:"no-cache",credentials:!0===e.withCredentials?"include":"same-origin",headers:{"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:s.signal})}catch(e){if(h)throw h;throw this.u.log(t.Warning,`Error from HTTP request. ${e}.`),e}finally{a&&clearTimeout(a),e.abortSignal&&(e.abortSignal.onabort=null)}if(!c.ok)throw new i(c.statusText,c.status);const l=function(t,e){let s;switch(e){case"arraybuffer":s=t.arrayBuffer();break;case"text":s=t.text();break;case"blob":case"document":case"json":throw new Error(`${e} is not supported.`);default:s=t.text()}return s}(c,e.responseType),u=await l;return new o(c.status,c.statusText,u)}getCookieString(t){let e="";return u.isNode&&this.p&&this.p.getCookies(t,((t,s)=>e=s.join("; "))),e}}class $ extends h{constructor(t){super(),this.u=t}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new r):e.method?e.url?new Promise(((s,h)=>{const c=new XMLHttpRequest;c.open(e.method,e.url,!0),c.withCredentials=void 0===e.withCredentials||e.withCredentials,c.setRequestHeader("X-Requested-With","XMLHttpRequest"),c.setRequestHeader("Content-Type","text/plain;charset=UTF-8");const a=e.headers;a&&Object.keys(a).forEach((t=>{c.setRequestHeader(t,a[t])})),e.responseType&&(c.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{c.abort(),h(new r)}),e.timeout&&(c.timeout=e.timeout),c.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),c.status>=200&&c.status<300?s(new o(c.status,c.statusText,c.response||c.responseText)):h(new i(c.statusText,c.status))},c.onerror=()=>{this.u.log(t.Warning,`Error from HTTP request. ${c.status}: ${c.statusText}.`),h(new i(c.statusText,c.status))},c.ontimeout=()=>{this.u.log(t.Warning,"Timeout from HTTP request."),h(new n)},c.send(e.content||"")})):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class C extends h{constructor(t){if(super(),"undefined"!=typeof fetch||u.isNode)this.v=new E(t);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this.v=new $(t)}}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new r):t.method?t.url?this.v.send(t):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(t){return this.v.getCookieString(t)}}class S{static write(t){return`${t}${S.RecordSeparator}`}static parse(t){if(t[t.length-1]!==S.RecordSeparator)throw new Error("Message is incomplete.");const e=t.split(S.RecordSeparator);return e.pop(),e}}S.RecordSeparatorCode=30,S.RecordSeparator=String.fromCharCode(S.RecordSeparatorCode);class P{writeHandshakeRequest(t){return S.write(JSON.stringify(t))}parseHandshakeResponse(t){let e,s,i;if(p(t)){const e=new Uint8Array(t),n=e.indexOf(S.RecordSeparatorCode);if(-1===n)throw new Error("Message is incomplete.");const r=n+1;s=String.fromCharCode.apply(null,Array.prototype.slice.call(e.slice(0,r))),i=e.byteLength>r?e.slice(r).buffer:null}else{const e=t,n=e.indexOf(S.RecordSeparator);if(-1===n)throw new Error("Message is incomplete.");const r=n+1;s=e.substring(0,r),i=e.length>r?e.substring(r):null}const n=S.parse(s),r=JSON.parse(n[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return e=r,[i,e]}}var k,T;!function(t){t[t.Invocation=1]="Invocation",t[t.StreamItem=2]="StreamItem",t[t.Completion=3]="Completion",t[t.StreamInvocation=4]="StreamInvocation",t[t.CancelInvocation=5]="CancelInvocation",t[t.Ping=6]="Ping",t[t.Close=7]="Close"}(k||(k={}));class _{constructor(){this.observers=[]}next(t){for(const e of this.observers)e.next(t)}error(t){for(const e of this.observers)e.error&&e.error(t)}complete(){for(const t of this.observers)t.complete&&t.complete()}subscribe(t){return this.observers.push(t),new w(this,t)}}!function(t){t.Disconnected="Disconnected",t.Connecting="Connecting",t.Connected="Connected",t.Disconnecting="Disconnecting",t.Reconnecting="Reconnecting"}(T||(T={}));class I{constructor(t,e,s,i){l.isRequired(t,"connection"),l.isRequired(e,"logger"),l.isRequired(s,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this.u=e,this.$=s,this.connection=t,this.C=i,this.S=new P,this.connection.onreceive=t=>this.P(t),this.connection.onclose=t=>this.k(t),this.T={},this._={},this.I=[],this.H=[],this.D=[],this.A=0,this.U=!1,this.R=T.Disconnected,this.L=!1,this.N=this.$.writeMessage({type:k.Ping})}static create(t,e,s,i){return new I(t,e,s,i)}get state(){return this.R}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(t){if(this.R!==T.Disconnected&&this.R!==T.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!t)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=t}start(){return this.q=this.M(),this.q}async M(){if(this.R!==T.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this.R=T.Connecting,this.u.log(t.Debug,"Starting HubConnection.");try{await this.O(),this.R=T.Connected,this.L=!0,this.u.log(t.Debug,"HubConnection connected successfully.")}catch(e){return this.R=T.Disconnected,this.u.log(t.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async O(){this.W=void 0,this.U=!1;const e=new Promise(((t,e)=>{this.j=t,this.F=e}));await this.connection.start(this.$.transferFormat);try{const s={protocol:this.$.name,version:this.$.version};if(this.u.log(t.Debug,"Sending handshake request."),await this.B(this.S.writeHandshakeRequest(s)),this.u.log(t.Information,`Using HubProtocol '${this.$.name}'.`),this.X(),this.J(),this.V(),await e,this.W)throw this.W}catch(e){throw this.u.log(t.Debug,`Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`),this.X(),this.G(),await this.connection.stop(e),e}}async stop(){const t=this.q;this.K=this.Y(),await this.K;try{await t}catch(t){}}Y(e){return this.R===T.Disconnected?(this.u.log(t.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve()):this.R===T.Disconnecting?(this.u.log(t.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this.K):(this.R=T.Disconnecting,this.u.log(t.Debug,"Stopping HubConnection."),this.Z?(this.u.log(t.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this.Z),this.Z=void 0,this.tt(),Promise.resolve()):(this.X(),this.G(),this.W=e||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))}stream(t,...e){const[s,i]=this.et(e),n=this.st(t,e,i);let r;const o=new _;return o.cancelCallback=()=>{const t=this.it(n.invocationId);return delete this.T[n.invocationId],r.then((()=>this.nt(t)))},this.T[n.invocationId]=(t,e)=>{e?o.error(e):t&&(t.type===k.Completion?t.error?o.error(new Error(t.error)):o.complete():o.next(t.item))},r=this.nt(n).catch((t=>{o.error(t),delete this.T[n.invocationId]})),this.rt(s,r),o}B(t){return this.V(),this.connection.send(t)}nt(t){return this.B(this.$.writeMessage(t))}send(t,...e){const[s,i]=this.et(e),n=this.nt(this.ot(t,e,!0,i));return this.rt(s,n),n}invoke(t,...e){const[s,i]=this.et(e),n=this.ot(t,e,!1,i);return new Promise(((t,e)=>{this.T[n.invocationId]=(s,i)=>{i?e(i):s&&(s.type===k.Completion?s.error?e(new Error(s.error)):t(s.result):e(new Error(`Unexpected message type: ${s.type}`)))};const i=this.nt(n).catch((t=>{e(t),delete this.T[n.invocationId]}));this.rt(s,i)}))}on(t,e){t&&e&&(t=t.toLowerCase(),this._[t]||(this._[t]=[]),-1===this._[t].indexOf(e)&&this._[t].push(e))}off(t,e){if(!t)return;t=t.toLowerCase();const s=this._[t];if(s)if(e){const i=s.indexOf(e);-1!==i&&(s.splice(i,1),0===s.length&&delete this._[t])}else delete this._[t]}onclose(t){t&&this.I.push(t)}onreconnecting(t){t&&this.H.push(t)}onreconnected(t){t&&this.D.push(t)}P(e){if(this.X(),this.U||(e=this.ht(e),this.U=!0),e){const s=this.$.parseMessages(e,this.u);for(const e of s)switch(e.type){case k.Invocation:this.ct(e);break;case k.StreamItem:case k.Completion:const s=this.T[e.invocationId];s&&(e.type===k.Completion&&delete this.T[e.invocationId],s(e));break;case k.Ping:break;case k.Close:this.u.log(t.Information,"Close message received from server.");const i=e.error?new Error("Server returned an error on close: "+e.error):void 0;!0===e.allowReconnect?this.connection.stop(i):this.K=this.Y(i);break;default:this.u.log(t.Warning,`Invalid message type: ${e.type}.`)}}this.J()}ht(e){let s,i;try{[i,s]=this.S.parseHandshakeResponse(e)}catch(e){const s="Error parsing handshake response: "+e;this.u.log(t.Error,s);const i=new Error(s);throw this.F(i),i}if(s.error){const e="Server returned handshake error: "+s.error;this.u.log(t.Error,e);const i=new Error(e);throw this.F(i),i}return this.u.log(t.Debug,"Server handshake complete."),this.j(),i}V(){this.connection.features.inherentKeepAlive||(this.G(),this.at=setTimeout((async()=>{if(this.R===T.Connected)try{await this.B(this.N)}catch{this.G()}}),this.keepAliveIntervalInMilliseconds))}J(){this.connection.features&&this.connection.features.inherentKeepAlive||(this.lt=setTimeout((()=>this.serverTimeout()),this.serverTimeoutInMilliseconds))}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}ct(e){const s=this._[e.target.toLowerCase()];if(s){try{s.forEach((t=>t.apply(this,e.arguments)))}catch(s){this.u.log(t.Error,`A callback for the method ${e.target.toLowerCase()} threw error '${s}'.`)}if(e.invocationId){const e="Server requested a response, which is not supported in this version of the client.";this.u.log(t.Error,e),this.K=this.Y(new Error(e))}}else this.u.log(t.Warning,`No client method with the name '${e.target}' found.`)}k(e){this.u.log(t.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this.R}.`),this.W=this.W||e||new Error("The underlying connection was closed before the hub handshake could complete."),this.j&&this.j(),this.ut(e||new Error("Invocation canceled due to the underlying connection being closed.")),this.X(),this.G(),this.R===T.Disconnecting?this.tt(e):this.R===T.Connected&&this.C?this.dt(e):this.R===T.Connected&&this.tt(e)}tt(e){if(this.L){this.R=T.Disconnected,this.L=!1;try{this.I.forEach((t=>t.apply(this,[e])))}catch(s){this.u.log(t.Error,`An onclose callback called with error '${e}' threw error '${s}'.`)}}}async dt(e){const s=Date.now();let i=0,n=void 0!==e?e:new Error("Attempting to reconnect due to a unknown error."),r=this.ft(i++,0,n);if(null===r)return this.u.log(t.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this.tt(e);if(this.R=T.Reconnecting,e?this.u.log(t.Information,`Connection reconnecting because of error '${e}'.`):this.u.log(t.Information,"Connection reconnecting."),0!==this.H.length){try{this.H.forEach((t=>t.apply(this,[e])))}catch(s){this.u.log(t.Error,`An onreconnecting callback called with error '${e}' threw error '${s}'.`)}if(this.R!==T.Reconnecting)return void this.u.log(t.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==r;){if(this.u.log(t.Information,`Reconnect attempt number ${i} will start in ${r} ms.`),await new Promise((t=>{this.Z=setTimeout(t,r)})),this.Z=void 0,this.R!==T.Reconnecting)return void this.u.log(t.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this.O(),this.R=T.Connected,this.u.log(t.Information,"HubConnection reconnected successfully."),0!==this.D.length)try{this.D.forEach((t=>t.apply(this,[this.connection.connectionId])))}catch(e){this.u.log(t.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`)}return}catch(e){if(this.u.log(t.Information,`Reconnect attempt failed because of error '${e}'.`),this.R!==T.Reconnecting)return this.u.log(t.Debug,`Connection moved to the '${this.R}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this.R===T.Disconnecting&&this.tt());n=e instanceof Error?e:new Error(e.toString()),r=this.ft(i++,Date.now()-s,n)}}this.u.log(t.Information,`Reconnect retries have been exhausted after ${Date.now()-s} ms and ${i} failed attempts. Connection disconnecting.`),this.tt()}ft(e,s,i){try{return this.C.nextRetryDelayInMilliseconds({elapsedMilliseconds:s,previousRetryCount:e,retryReason:i})}catch(i){return this.u.log(t.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${s}) threw error '${i}'.`),null}}ut(t){const e=this.T;this.T={},Object.keys(e).forEach((s=>{(0,e[s])(null,t)}))}G(){this.at&&clearTimeout(this.at)}X(){this.lt&&clearTimeout(this.lt)}ot(t,e,s,i){if(s)return 0!==i.length?{arguments:e,streamIds:i,target:t,type:k.Invocation}:{arguments:e,target:t,type:k.Invocation};{const s=this.A;return this.A++,0!==i.length?{arguments:e,invocationId:s.toString(),streamIds:i,target:t,type:k.Invocation}:{arguments:e,invocationId:s.toString(),target:t,type:k.Invocation}}}rt(t,e){if(0!==t.length){e||(e=Promise.resolve());for(const s in t)t[s].subscribe({complete:()=>{e=e.then((()=>this.nt(this.wt(s))))},error:t=>{let i;i=t instanceof Error?t.message:t&&t.toString?t.toString():"Unknown error",e=e.then((()=>this.nt(this.wt(s,i))))},next:t=>{e=e.then((()=>this.nt(this.gt(s,t))))}})}}et(t){const e=[],s=[];for(let i=0;i<t.length;i++){const n=t[i];if(this.yt(n)){const r=this.A;this.A++,e[r]=n,s.push(r.toString()),t.splice(i,1)}}return[e,s]}yt(t){return t&&t.subscribe&&"function"==typeof t.subscribe}st(t,e,s){const i=this.A;return this.A++,0!==s.length?{arguments:e,invocationId:i.toString(),streamIds:s,target:t,type:k.StreamInvocation}:{arguments:e,invocationId:i.toString(),target:t,type:k.StreamInvocation}}it(t){return{invocationId:t,type:k.CancelInvocation}}gt(t,e){return{invocationId:t,item:e,type:k.StreamItem}}wt(t,e,s){return e?{error:e,invocationId:t,type:k.Completion}:{invocationId:t,result:s,type:k.Completion}}}const H=[0,2e3,1e4,3e4,null];class D{constructor(t){this.bt=void 0!==t?[...t,null]:H}nextRetryDelayInMilliseconds(t){return this.bt[t.previousRetryCount]}}var A,U;!function(t){t[t.None=0]="None",t[t.WebSockets=1]="WebSockets",t[t.ServerSentEvents=2]="ServerSentEvents",t[t.LongPolling=4]="LongPolling"}(A||(A={})),function(t){t[t.Text=1]="Text",t[t.Binary=2]="Binary"}(U||(U={}));class R{constructor(){this.vt=!1,this.onabort=null}abort(){this.vt||(this.vt=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this.vt}}class L{constructor(t,e,s,i,n,r){this.v=t,this.Et=e,this.u=s,this.$t=new R,this.Ct=i,this.St=n,this.Pt=r,this.kt=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this.$t.aborted}async connect(e,s){if(l.isRequired(e,"url"),l.isRequired(s,"transferFormat"),l.isIn(s,U,"transferFormat"),this.Tt=e,this.u.log(t.Trace,"(LongPolling transport) Connecting."),s===U.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[n,r]=m(),o={[n]:r,...this.Pt},h={abortSignal:this.$t.signal,headers:o,timeout:1e5,withCredentials:this.St};s===U.Binary&&(h.responseType="arraybuffer");const c=await this._t();this.It(h,c);const a=`${e}&_=${Date.now()}`;this.u.log(t.Trace,`(LongPolling transport) polling: ${a}.`);const u=await this.v.get(a,h);200!==u.statusCode?(this.u.log(t.Error,`(LongPolling transport) Unexpected response code: ${u.statusCode}.`),this.Ht=new i(u.statusText||"",u.statusCode),this.kt=!1):this.kt=!0,this.Dt=this.At(this.Tt,h)}async _t(){return this.Et?await this.Et():null}It(t,e){t.headers||(t.headers={}),e?t.headers.Authorization=`Bearer ${e}`:t.headers.Authorization&&delete t.headers.Authorization}async At(e,s){try{for(;this.kt;){const r=await this._t();this.It(s,r);try{const n=`${e}&_=${Date.now()}`;this.u.log(t.Trace,`(LongPolling transport) polling: ${n}.`);const r=await this.v.get(n,s);204===r.statusCode?(this.u.log(t.Information,"(LongPolling transport) Poll terminated by server."),this.kt=!1):200!==r.statusCode?(this.u.log(t.Error,`(LongPolling transport) Unexpected response code: ${r.statusCode}.`),this.Ht=new i(r.statusText||"",r.statusCode),this.kt=!1):r.content?(this.u.log(t.Trace,`(LongPolling transport) data received. ${d(r.content,this.Ct)}.`),this.onreceive&&this.onreceive(r.content)):this.u.log(t.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(e){this.kt?e instanceof n?this.u.log(t.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.Ht=e,this.kt=!1):this.u.log(t.Trace,`(LongPolling transport) Poll errored after shutdown: ${e.message}`)}}}finally{this.u.log(t.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.Ut()}}async send(t){return this.kt?f(this.u,"LongPolling",this.v,this.Tt,this.Et,t,this.Ct,this.St,this.Pt):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this.u.log(t.Trace,"(LongPolling transport) Stopping polling."),this.kt=!1,this.$t.abort();try{await this.Dt,this.u.log(t.Trace,`(LongPolling transport) sending DELETE request to ${this.Tt}.`);const e={},[s,i]=m();e[s]=i;const n={headers:{...e,...this.Pt},withCredentials:this.St},r=await this._t();this.It(n,r),await this.v.delete(this.Tt,n),this.u.log(t.Trace,"(LongPolling transport) DELETE request sent.")}finally{this.u.log(t.Trace,"(LongPolling transport) Stop finished."),this.Ut()}}Ut(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this.Ht&&(e+=" Error: "+this.Ht),this.u.log(t.Trace,e),this.onclose(this.Ht)}}}class x{constructor(t,e,s,i,n,r,o){this.v=t,this.Et=e,this.u=s,this.Ct=i,this.St=r,this.Rt=n,this.Pt=o,this.onreceive=null,this.onclose=null}async connect(e,s){if(l.isRequired(e,"url"),l.isRequired(s,"transferFormat"),l.isIn(s,U,"transferFormat"),this.u.log(t.Trace,"(SSE transport) Connecting."),this.Tt=e,this.Et){const t=await this.Et();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((i,n)=>{let r,o=!1;if(s===U.Text){if(u.isBrowser||u.isWebWorker)r=new this.Rt(e,{withCredentials:this.St});else{const t=this.v.getCookieString(e),s={};s.Cookie=t;const[i,n]=m();s[i]=n,r=new this.Rt(e,{withCredentials:this.St,headers:{...s,...this.Pt}})}try{r.onmessage=e=>{if(this.onreceive)try{this.u.log(t.Trace,`(SSE transport) data received. ${d(e.data,this.Ct)}.`),this.onreceive(e.data)}catch(t){return void this.Lt(t)}},r.onerror=t=>{const e=new Error("Error occurred while starting EventSource");o?this.Lt(e):n(e)},r.onopen=()=>{this.u.log(t.Information,`SSE connected to ${this.Tt}`),this.xt=r,o=!0,i()}}catch(t){return void n(t)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(t){return this.xt?f(this.u,"SSE",this.v,this.Tt,this.Et,t,this.Ct,this.St,this.Pt):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this.Lt(),Promise.resolve()}Lt(t){this.xt&&(this.xt.close(),this.xt=void 0,this.onclose&&this.onclose(t))}}class N{constructor(t,e,s,i,n,r){this.u=s,this.Et=e,this.Ct=i,this.Nt=n,this.v=t,this.onreceive=null,this.onclose=null,this.Pt=r}async connect(e,s){if(l.isRequired(e,"url"),l.isRequired(s,"transferFormat"),l.isIn(s,U,"transferFormat"),this.u.log(t.Trace,"(WebSockets transport) Connecting."),this.Et){const t=await this.Et();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((i,n)=>{let r;e=e.replace(/^http/,"ws");const o=this.v.getCookieString(e);let h=!1;if(u.isNode){const t={},[s,i]=m();t[s]=i,o&&(t.Cookie=`${o}`),r=new this.Nt(e,void 0,{headers:{...t,...this.Pt}})}r||(r=new this.Nt(e)),s===U.Binary&&(r.binaryType="arraybuffer"),r.onopen=s=>{this.u.log(t.Information,`WebSocket connected to ${e}.`),this.qt=r,h=!0,i()},r.onerror=t=>{let e=null;e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:new Error("There was an error with the transport."),n(e)},r.onmessage=e=>{if(this.u.log(t.Trace,`(WebSockets transport) data received. ${d(e.data,this.Ct)}.`),this.onreceive)try{this.onreceive(e.data)}catch(t){return void this.Lt(t)}},r.onclose=t=>{if(h)this.Lt(t);else{let e=null;e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:new Error("There was an error with the transport."),n(e)}}}))}send(e){return this.qt&&this.qt.readyState===this.Nt.OPEN?(this.u.log(t.Trace,`(WebSockets transport) sending data. ${d(e,this.Ct)}.`),this.qt.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this.qt&&this.Lt(void 0),Promise.resolve()}Lt(e){this.qt&&(this.qt.onclose=()=>{},this.qt.onmessage=()=>{},this.qt.onerror=()=>{},this.qt.close(),this.qt=void 0),this.u.log(t.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this.Mt(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason}).`)))}Mt(t){return t&&"boolean"==typeof t.wasClean&&"number"==typeof t.code}}class q{constructor(e,s={}){var i;if(this.Ot=()=>{},this.features={},this.Wt=1,l.isRequired(e,"url"),this.u=void 0===(i=s.logger)?new g(t.Information):null===i?c.instance:void 0!==i.log?i:new g(i),this.baseUrl=this.jt(e),(s=s||{}).logMessageContent=void 0!==s.logMessageContent&&s.logMessageContent,"boolean"!=typeof s.withCredentials&&void 0!==s.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");s.withCredentials=void 0===s.withCredentials||s.withCredentials;let n=null,r=null;if(u.isNode){const t=require;n=t("ws"),r=t("eventsource")}u.isNode||"undefined"==typeof WebSocket||s.WebSocket?u.isNode&&!s.WebSocket&&n&&(s.WebSocket=n):s.WebSocket=WebSocket,u.isNode||"undefined"==typeof EventSource||s.EventSource?u.isNode&&!s.EventSource&&void 0!==r&&(s.EventSource=r):s.EventSource=EventSource,this.v=s.httpClient||new C(this.u),this.R="Disconnected",this.L=!1,this.Ft=s,this.onreceive=null,this.onclose=null}async start(e){if(e=e||U.Binary,l.isIn(e,U,"transferFormat"),this.u.log(t.Debug,`Starting connection with transfer format '${U[e]}'.`),"Disconnected"!==this.R)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this.R="Connecting",this.Bt=this.O(e),await this.Bt,"Disconnecting"===this.R){const e="Failed to start the HttpConnection before stop() was called.";return this.u.log(t.Error,e),await this.K,Promise.reject(new Error(e))}if("Connected"!==this.R){const e="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this.u.log(t.Error,e),Promise.reject(new Error(e))}this.L=!0}send(t){return"Connected"!==this.R?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this.Xt||(this.Xt=new M(this.transport)),this.Xt.send(t))}async stop(e){return"Disconnected"===this.R?(this.u.log(t.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this.R?(this.u.log(t.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this.K):(this.R="Disconnecting",this.K=new Promise((t=>{this.Ot=t})),await this.Y(e),void await this.K)}async Y(e){this.Jt=e;try{await this.Bt}catch(t){}if(this.transport){try{await this.transport.stop()}catch(e){this.u.log(t.Error,`HttpConnection.transport.stop() threw error '${e}'.`),this.Vt()}this.transport=void 0}else this.u.log(t.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async O(e){let s=this.baseUrl;this.Et=this.Ft.accessTokenFactory;try{if(this.Ft.skipNegotiation){if(this.Ft.transport!==A.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this.zt(A.WebSockets),await this.Gt(s,e)}else{let t=null,i=0;do{if(t=await this.Kt(s),"Disconnecting"===this.R||"Disconnected"===this.R)throw new Error("The connection was stopped during negotiation.");if(t.error)throw new Error(t.error);if(t.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(t.url&&(s=t.url),t.accessToken){const e=t.accessToken;this.Et=()=>e}i++}while(t.url&&i<100);if(100===i&&t.url)throw new Error("Negotiate redirection limit exceeded.");await this.Qt(s,this.Ft.transport,t,e)}this.transport instanceof L&&(this.features.inherentKeepAlive=!0),"Connecting"===this.R&&(this.u.log(t.Debug,"The HttpConnection connected successfully."),this.R="Connected")}catch(e){return this.u.log(t.Error,"Failed to start the connection: "+e),this.R="Disconnected",this.transport=void 0,this.Ot(),Promise.reject(e)}}async Kt(e){const s={};if(this.Et){const t=await this.Et();t&&(s.Authorization=`Bearer ${t}`)}const[i,n]=m();s[i]=n;const r=this.Yt(e);this.u.log(t.Debug,`Sending negotiation request: ${r}.`);try{const t=await this.v.post(r,{content:"",headers:{...s,...this.Ft.headers},withCredentials:this.Ft.withCredentials});if(200!==t.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${t.statusCode}'`));const e=JSON.parse(t.content);return(!e.negotiateVersion||e.negotiateVersion<1)&&(e.connectionToken=e.connectionId),e}catch(e){return this.u.log(t.Error,"Failed to complete negotiation with the server: "+e),Promise.reject(e)}}Zt(t,e){return e?t+(-1===t.indexOf("?")?"?":"&")+`id=${e}`:t}async Qt(e,s,i,n){let r=this.Zt(e,i.connectionToken);if(this.te(s))return this.u.log(t.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=s,await this.Gt(r,n),void(this.connectionId=i.connectionId);const o=[],h=i.availableTransports||[];let c=i;for(const i of h){const h=this.ee(i,s,n);if(h instanceof Error)o.push(`${i.transport} failed: ${h}`);else if(this.te(h)){if(this.transport=h,!c){try{c=await this.Kt(e)}catch(t){return Promise.reject(t)}r=this.Zt(e,c.connectionToken)}try{return await this.Gt(r,n),void(this.connectionId=c.connectionId)}catch(e){if(this.u.log(t.Error,`Failed to start the transport '${i.transport}': ${e}`),c=void 0,o.push(`${i.transport} failed: ${e}`),"Connecting"!==this.R){const e="Failed to select transport before stop() was called.";return this.u.log(t.Debug,e),Promise.reject(new Error(e))}}}}return o.length>0?Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${o.join(" ")}`)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}zt(t){switch(t){case A.WebSockets:if(!this.Ft.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new N(this.v,this.Et,this.u,this.Ft.logMessageContent||!1,this.Ft.WebSocket,this.Ft.headers||{});case A.ServerSentEvents:if(!this.Ft.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new x(this.v,this.Et,this.u,this.Ft.logMessageContent||!1,this.Ft.EventSource,this.Ft.withCredentials,this.Ft.headers||{});case A.LongPolling:return new L(this.v,this.Et,this.u,this.Ft.logMessageContent||!1,this.Ft.withCredentials,this.Ft.headers||{});default:throw new Error(`Unknown transport: ${t}.`)}}Gt(t,e){return this.transport.onreceive=this.onreceive,this.transport.onclose=t=>this.Vt(t),this.transport.connect(t,e)}ee(e,s,i){const n=A[e.transport];if(null==n)return this.u.log(t.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(!function(t,e){return!t||0!=(e&t)}(s,n))return this.u.log(t.Debug,`Skipping transport '${A[n]}' because it was disabled by the client.`),new Error(`'${A[n]}' is disabled by the client.`);if(!(e.transferFormats.map((t=>U[t])).indexOf(i)>=0))return this.u.log(t.Debug,`Skipping transport '${A[n]}' because it does not support the requested transfer format '${U[i]}'.`),new Error(`'${A[n]}' does not support ${U[i]}.`);if(n===A.WebSockets&&!this.Ft.WebSocket||n===A.ServerSentEvents&&!this.Ft.EventSource)return this.u.log(t.Debug,`Skipping transport '${A[n]}' because it is not supported in your environment.'`),new Error(`'${A[n]}' is not supported in your environment.`);this.u.log(t.Debug,`Selecting transport '${A[n]}'.`);try{return this.zt(n)}catch(t){return t}}te(t){return t&&"object"==typeof t&&"connect"in t}Vt(e){if(this.u.log(t.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this.R}.`),this.transport=void 0,e=this.Jt||e,this.Jt=void 0,"Disconnected"!==this.R){if("Connecting"===this.R)throw this.u.log(t.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this.R&&this.Ot(),e?this.u.log(t.Error,`Connection disconnected with error '${e}'.`):this.u.log(t.Information,"Connection disconnected."),this.Xt&&(this.Xt.stop().catch((e=>{this.u.log(t.Error,`TransportSendQueue.stop() threw error '${e}'.`)})),this.Xt=void 0),this.connectionId=void 0,this.R="Disconnected",this.L){this.L=!1;try{this.onclose&&this.onclose(e)}catch(s){this.u.log(t.Error,`HttpConnection.onclose(${e}) threw error '${s}'.`)}}}else this.u.log(t.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`)}jt(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!u.isBrowser||!window.document)throw new Error(`Cannot resolve '${e}'.`);const s=window.document.createElement("a");return s.href=e,this.u.log(t.Information,`Normalizing '${e}' to '${s.href}'.`),s.href}Yt(t){const e=t.indexOf("?");let s=t.substring(0,-1===e?t.length:e);return"/"!==s[s.length-1]&&(s+="/"),s+="negotiate",s+=-1===e?"":t.substring(e),-1===s.indexOf("negotiateVersion")&&(s+=-1===e?"?":"&",s+="negotiateVersion="+this.Wt),s}}class M{constructor(t){this.se=t,this.ie=[],this.ne=!0,this.re=new O,this.oe=new O,this.he=this.ce()}send(t){return this.ae(t),this.oe||(this.oe=new O),this.oe.promise}stop(){return this.ne=!1,this.re.resolve(),this.he}ae(t){if(this.ie.length&&typeof this.ie[0]!=typeof t)throw new Error(`Expected data to be of type ${typeof this.ie} but was of type ${typeof t}`);this.ie.push(t),this.re.resolve()}async ce(){for(;;){if(await this.re.promise,!this.ne){this.oe&&this.oe.reject("Connection stopped.");break}this.re=new O;const t=this.oe;this.oe=void 0;const e="string"==typeof this.ie[0]?this.ie.join(""):M.le(this.ie);this.ie.length=0;try{await this.se.send(e),t.resolve()}catch(e){t.reject(e)}}}static le(t){const e=t.map((t=>t.byteLength)).reduce(((t,e)=>t+e)),s=new Uint8Array(e);let i=0;for(const e of t)s.set(new Uint8Array(e),i),i+=e.byteLength;return s.buffer}}class O{constructor(){this.promise=new Promise(((t,e)=>[this.ue,this.de]=[t,e]))}resolve(){this.ue()}reject(t){this.de(t)}}class W{constructor(){this.name="json",this.version=1,this.transferFormat=U.Text}parseMessages(e,s){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===s&&(s=c.instance);const i=S.parse(e),n=[];for(const e of i){const i=JSON.parse(e);if("number"!=typeof i.type)throw new Error("Invalid payload.");switch(i.type){case k.Invocation:this.pe(i);break;case k.StreamItem:this.fe(i);break;case k.Completion:this.we(i);break;case k.Ping:case k.Close:break;default:s.log(t.Information,"Unknown message type '"+i.type+"' ignored.");continue}n.push(i)}return n}writeMessage(t){return S.write(JSON.stringify(t))}pe(t){this.ge(t.target,"Invalid payload for Invocation message."),void 0!==t.invocationId&&this.ge(t.invocationId,"Invalid payload for Invocation message.")}fe(t){if(this.ge(t.invocationId,"Invalid payload for StreamItem message."),void 0===t.item)throw new Error("Invalid payload for StreamItem message.")}we(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this.ge(t.error,"Invalid payload for Completion message."),this.ge(t.invocationId,"Invalid payload for Completion message.")}ge(t,e){if("string"!=typeof t||""===t)throw new Error(e)}}const j={trace:t.Trace,debug:t.Debug,info:t.Information,information:t.Information,warn:t.Warning,warning:t.Warning,error:t.Error,critical:t.Critical,none:t.None};class F{configureLogging(t){if(l.isRequired(t,"logging"),void 0!==t.log)this.logger=t;else if("string"==typeof t){const e=function(t){const e=j[t.toLowerCase()];if(void 0!==e)return e;throw new Error(`Unknown log level: ${t}`)}(t);this.logger=new g(e)}else this.logger=new g(t);return this}withUrl(t,e){return l.isRequired(t,"url"),l.isNotEmpty(t,"url"),this.url=t,this.httpConnectionOptions="object"==typeof e?{...this.httpConnectionOptions,...e}:{...this.httpConnectionOptions,transport:e},this}withHubProtocol(t){return l.isRequired(t,"protocol"),this.protocol=t,this}withAutomaticReconnect(t){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return t?Array.isArray(t)?this.reconnectPolicy=new D(t):this.reconnectPolicy=t:this.reconnectPolicy=new D,this}build(){const t=this.httpConnectionOptions||{};if(void 0===t.logger&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const e=new q(this.url,t);return I.create(e,this.logger||c.instance,this.protocol||new W,this.reconnectPolicy)}}return Uint8Array.prototype.indexOf||Object.defineProperty(Uint8Array.prototype,"indexOf",{value:Array.prototype.indexOf,writable:!0}),Uint8Array.prototype.slice||Object.defineProperty(Uint8Array.prototype,"slice",{value:function(t,e){return new Uint8Array(Array.prototype.slice.call(this,t,e))},writable:!0}),Uint8Array.prototype.forEach||Object.defineProperty(Uint8Array.prototype,"forEach",{value:Array.prototype.forEach,writable:!0}),s})()},"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.signalR=e():t.signalR=e();
//# sourceMappingURL=signalr.js.map